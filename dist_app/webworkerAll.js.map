{"version":3,"file":"webworkerAll.js","sources":["../node_modules/pixi.js/lib/app/ResizePlugin.mjs","../node_modules/pixi.js/lib/app/TickerPlugin.mjs","../node_modules/pixi.js/lib/filters/FilterPipe.mjs","../node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../node_modules/pixi.js/lib/filters/FilterSystem.mjs","../node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","../node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","../node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","../node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../node_modules/pixi.js/lib/app/init.mjs","../node_modules/pixi.js/lib/scene/graphics/init.mjs","../node_modules/pixi.js/lib/scene/mesh/init.mjs","../node_modules/pixi.js/lib/scene/particle-container/init.mjs","../node_modules/pixi.js/lib/scene/text/init.mjs","../node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../node_modules/pixi.js/lib/scene/text-html/init.mjs","../node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  const renderGroup = target.renderGroup || target.parentRenderGroup;\n  bounds.applyMatrix(renderGroup.worldTransform);\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.renderGroup || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(renderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.renderGroup) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n//# sourceMappingURL=getFastGlobalBounds.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh.texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["ResizePlugin","options","dom","width","height","clientWidth","clientHeight","ExtensionType","TickerPlugin","ticker","UPDATE_PRIORITY","Ticker","oldTicker","FilterPipe","renderer","filterEffect","container","instructionSet","_filterEffect","_container","instruction","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","_getGlobalBoundsRecursive","renderGroup","manageEffects","localBounds","boundsPool","viewBounds","children","i","advanced","getGlobalRenderableBounds","renderables","renderable","quadGeometry","Geometry","FilterSystem","UniformGroup","BindGroup","filters","filterData","filterFrameTransform","colorTextureSource","resolution","padding","antialias","blendRequired","enabled","clipToViewport","filter","warn","viewPort","rootResolution","TexturePool","inputTexture","backTexture","Texture","previousBounds","renderTarget","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","input","output","clear","offset","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","rootTexture","batchUniforms","RendererType","Bounds","outputMatrix","sprite","data","mappedMatrix","worldTransform","_MeshGeometry","args","deprecation","v8_0_0","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry","textStyleToCSS","style","stroke","fill","cssStyles","Color","strokeToCSS","dropShadowToCSS","tagStyleToCSS","dropShadowStyle","color","position","templates","transform","tagStyles","out","tagStyle","cssTagStyle","j","HTMLTextStyle","TextStyle","generateTextStyleKey","toAdd","v","toRemove","nssvg","nsxhtml","HTMLTextRenderData","foreignObject","svgRoot","styleElement","domElement","tempHTMLTextRenderData","measureHtmlText","text","fontStyleCSS","htmlTextRenderData","contentBounds","doublePadding","GraphicsPipe","adaptor","State","graphics","context","wasBatched","gpuContext","batches","batch","shader","localUniforms","color32BitToUniform","batchPipe","roundPixels","batchClone","BigPool","BatchableGraphics","graphicsUid","_PlaneGeometry","total","verts","verticesX","verticesY","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","PlaneGeometry","BatchableMesh","transformedUvs","textureMatrix","MeshPipe","mesh","meshData","isBatched","geometry","batchableMesh","batcher","batched","gpuBatchableMesh","gpuMesh","getAdjustedBlendModeBlend","GlParticleContainerAdaptor","particleContainerPipe","state","gl","buffer","glType","GpuParticleContainerAdaptor","createIndicesForQuads","size","outBuffer","totalIndices","generateParticleUpdateFunction","properties","generateUpdateFunction","dynamic","funcFragments","property","attributeInfo","getAttributeInfoFromFormat","functionSource","ParticleBuffer","staticVertexSize","dynamicVertexSize","ViewableBuffer","dynamicOffset","staticOffset","uploadFunction","key","getParticleSyncKey","particles","uploadStatic","dynamicAttributeBuffer","staticAttributeBuffer","keyGen","fragment","vertex","wgsl","ParticleShader","Shader","glProgram","GlProgram","gpuProgram","GpuProgram","TextureStyle","ParticleContainerPipe","_renderable","transformationMatrix","GlParticleContainerPipe","GpuParticleContainerPipe","_NineSliceGeometry","w","scaleW","h","scaleH","scale","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","gpuSprite","batchableSprite","tilingBit","tilingBitGl","TilingSpriteShader","compileHighShaderGpuProgram","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","matrix","anchorX","anchorY","texture","textureWidth","textureHeight","uTextureTransform","QuadGeometry","setPositions","tilingSprite","applyMatrix","array","stride","index","a","b","c","d","tx","ty","setUvs","sharedQuad","TilingSpritePipe","tilingSpriteData","couldBatch","canBatch","renderableData","_nonPowOf2wrapping","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","getBatchSamplersUniformGroup","BitmapTextPipe","bitmapText","graphicsRenderable","syncWithProxy","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","chars","currentY","bitmapTextLayout","getBitmapTextLayout","tint","line","char","charData","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","dx","dy","worldScale","fontScale","distance","uid","proxy","HTMLTextPipe","gpuText","htmlText","newKey","htmlTextUid","e","updateQuadBounds","gpuTextData","BatchableSprite","isSafari","userAgent","DOMAdapter","tempBounds","getPo2TextureFromSource","image","extractFontFamilies","fontFamilies","dedupe","regex","matches","addFontFamily","fontFamily2","match","loadFontAsBase64","url","blob","reader","resolve","reject","loadFontCSS","dataSrc","FontStylePromiseCache","getFontCss","defaultOptions","fontPromises","getSVGUrl","fontCSS","htmlTextData","getTemporaryCanvasFromImage","canvasAndContext","CanvasPool","loadSVGImage","delay","resolve2","HTMLTextSystem","textKey","promise","measured","uvSafeOffset","svgURL","resource","activeTexture","CanvasTextPipe","textUid","checkRow","checkColumn","top","bottom","getCanvasBoundingBox","canvas","left","right","Rectangle","CanvasTextSystem","_renderer","CanvasTextMetrics","nextPow2","_textKey","trimmed","source","font","fontStringFromTextStyle","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","strokeStyle","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","shadowOptions","dropShadowColor","dropShadowAlpha","dropShadowBlur","dropShadowDistance","getCanvasFillStyle","linePositionYShift","strokeWidth","i2","isStroke","letterSpacing","useExperimentalLetterSpacing","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","extensions","GraphicsContextSystem"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63]}