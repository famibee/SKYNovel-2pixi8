{"version":3,"file":"SoundMng.js","sources":["../node_modules/@pixi/sound/lib/instance.mjs","../node_modules/@pixi/sound/lib/filters/Filter.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioUtils.mjs","../node_modules/@pixi/sound/lib/filters/EqualizerFilter.mjs","../node_modules/@pixi/sound/lib/filters/StereoFilter.mjs","../node_modules/@pixi/sound/lib/htmlaudio/HTMLAudioContext.mjs","../node_modules/@pixi/sound/lib/htmlaudio/HTMLAudioInstance.mjs","../node_modules/@pixi/sound/lib/htmlaudio/HTMLAudioMedia.mjs","../node_modules/@pixi/sound/lib/SoundSprite.mjs","../node_modules/@pixi/sound/lib/utils/supported.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioInstance.mjs","../node_modules/@pixi/sound/lib/Filterable.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioNodes.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioMedia.mjs","../node_modules/@pixi/sound/lib/Sound.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioContext.mjs","../node_modules/@pixi/sound/lib/SoundLibrary.mjs","../node_modules/@pixi/sound/lib/soundAsset.mjs","../node_modules/@pixi/sound/lib/index.mjs","../src/sn/SndBuf.ts","../src/sn/SoundMng.ts"],"sourcesContent":["let instance;\nfunction setInstance(sound) {\n  instance = sound;\n  return sound;\n}\nfunction getInstance() {\n  return instance;\n}\n\nexport { getInstance, instance, setInstance };\n//# sourceMappingURL=instance.mjs.map\n","class Filter {\n  /**\n   * @param {AudioNode} destination - The audio node to use as the destination for the input AudioNode\n   * @param {AudioNode} [source] - Optional output node, defaults to destination node. This is useful\n   *        when creating filters which contains multiple AudioNode elements chained together.\n   */\n  constructor(destination, source) {\n    this.init(destination, source);\n  }\n  /** Reinitialize */\n  init(destination, source) {\n    this.destination = destination;\n    this.source = source || destination;\n  }\n  /**\n   * Connect to the destination.\n   * @param {AudioNode} destination - The destination node to connect the output to\n   */\n  connect(destination) {\n    this.source?.connect(destination);\n  }\n  /** Completely disconnect filter from destination and source nodes. */\n  disconnect() {\n    this.source?.disconnect();\n  }\n  /** Destroy the filter and don't use after this. */\n  destroy() {\n    this.disconnect();\n    this.destination = null;\n    this.source = null;\n  }\n}\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n","import { getInstance } from '../instance.mjs';\n\nclass WebAudioUtils {\n  /**\n   * Dezippering is removed in the future Web Audio API, instead\n   * we use the `setValueAtTime` method, however, this is not available\n   * in all environments (e.g., Android webview), so we fallback to the `value` setter.\n   * @param param - AudioNode parameter object\n   * @param value - Value to set\n   * @return The value set\n   */\n  static setParamValue(param, value) {\n    if (param.setValueAtTime) {\n      const context = getInstance().context;\n      param.setValueAtTime(value, context.audioContext.currentTime);\n    } else {\n      param.value = value;\n    }\n    return value;\n  }\n}\n\nexport { WebAudioUtils };\n//# sourceMappingURL=WebAudioUtils.mjs.map\n","import { getInstance } from '../instance.mjs';\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils.mjs';\nimport { Filter } from './Filter.mjs';\n\nconst _EqualizerFilter = class extends Filter {\n  /**\n   * @param f32 - Default gain for 32 Hz\n   * @param f64 - Default gain for 64 Hz\n   * @param f125 - Default gain for 125 Hz\n   * @param f250 - Default gain for 250 Hz\n   * @param f500 - Default gain for 500 Hz\n   * @param f1k - Default gain for 1000 Hz\n   * @param f2k - Default gain for 2000 Hz\n   * @param f4k - Default gain for 4000 Hz\n   * @param f8k - Default gain for 8000 Hz\n   * @param f16k - Default gain for 16000 Hz\n   */\n  constructor(f32 = 0, f64 = 0, f125 = 0, f250 = 0, f500 = 0, f1k = 0, f2k = 0, f4k = 0, f8k = 0, f16k = 0) {\n    let bands = [];\n    const equalizerBands = [\n      {\n        f: _EqualizerFilter.F32,\n        type: \"lowshelf\",\n        gain: f32\n      },\n      {\n        f: _EqualizerFilter.F64,\n        type: \"peaking\",\n        gain: f64\n      },\n      {\n        f: _EqualizerFilter.F125,\n        type: \"peaking\",\n        gain: f125\n      },\n      {\n        f: _EqualizerFilter.F250,\n        type: \"peaking\",\n        gain: f250\n      },\n      {\n        f: _EqualizerFilter.F500,\n        type: \"peaking\",\n        gain: f500\n      },\n      {\n        f: _EqualizerFilter.F1K,\n        type: \"peaking\",\n        gain: f1k\n      },\n      {\n        f: _EqualizerFilter.F2K,\n        type: \"peaking\",\n        gain: f2k\n      },\n      {\n        f: _EqualizerFilter.F4K,\n        type: \"peaking\",\n        gain: f4k\n      },\n      {\n        f: _EqualizerFilter.F8K,\n        type: \"peaking\",\n        gain: f8k\n      },\n      {\n        f: _EqualizerFilter.F16K,\n        type: \"highshelf\",\n        gain: f16k\n      }\n    ];\n    if (!getInstance().useLegacy) {\n      bands = equalizerBands.map((band) => {\n        const node = getInstance().context.audioContext.createBiquadFilter();\n        node.type = band.type;\n        WebAudioUtils.setParamValue(node.Q, 1);\n        node.frequency.value = band.f;\n        WebAudioUtils.setParamValue(node.gain, band.gain);\n        return node;\n      });\n    }\n    super(bands[0], bands[bands.length - 1]);\n    this.bands = bands;\n    this.bandsMap = {};\n    for (let i = 0; i < this.bands.length; i++) {\n      const node = this.bands[i];\n      if (i > 0) {\n        this.bands[i - 1].connect(node);\n      }\n      this.bandsMap[node.frequency.value] = node;\n    }\n  }\n  /**\n   * Set gain on a specific frequency.\n   * @param frequency - The frequency, see EqualizerFilter.F* for bands\n   * @param gain - Recommended -40 to 40.\n   */\n  setGain(frequency, gain = 0) {\n    if (!this.bandsMap[frequency]) {\n      throw new Error(`No band found for frequency ${frequency}`);\n    }\n    WebAudioUtils.setParamValue(this.bandsMap[frequency].gain, gain);\n  }\n  /**\n   * Get gain amount on a specific frequency.\n   * @return The amount of gain set.\n   */\n  getGain(frequency) {\n    if (!this.bandsMap[frequency]) {\n      throw new Error(`No band found for frequency ${frequency}`);\n    }\n    return this.bandsMap[frequency].gain.value;\n  }\n  /**\n   * Gain at 32 Hz frequencey.\n   * @default 0\n   */\n  set f32(value) {\n    this.setGain(_EqualizerFilter.F32, value);\n  }\n  get f32() {\n    return this.getGain(_EqualizerFilter.F32);\n  }\n  /**\n   * Gain at 64 Hz frequencey.\n   * @default 0\n   */\n  set f64(value) {\n    this.setGain(_EqualizerFilter.F64, value);\n  }\n  get f64() {\n    return this.getGain(_EqualizerFilter.F64);\n  }\n  /**\n   * Gain at 125 Hz frequencey.\n   * @default 0\n   */\n  set f125(value) {\n    this.setGain(_EqualizerFilter.F125, value);\n  }\n  get f125() {\n    return this.getGain(_EqualizerFilter.F125);\n  }\n  /**\n   * Gain at 250 Hz frequencey.\n   * @default 0\n   */\n  set f250(value) {\n    this.setGain(_EqualizerFilter.F250, value);\n  }\n  get f250() {\n    return this.getGain(_EqualizerFilter.F250);\n  }\n  /**\n   * Gain at 500 Hz frequencey.\n   * @default 0\n   */\n  set f500(value) {\n    this.setGain(_EqualizerFilter.F500, value);\n  }\n  get f500() {\n    return this.getGain(_EqualizerFilter.F500);\n  }\n  /**\n   * Gain at 1 KHz frequencey.\n   * @default 0\n   */\n  set f1k(value) {\n    this.setGain(_EqualizerFilter.F1K, value);\n  }\n  get f1k() {\n    return this.getGain(_EqualizerFilter.F1K);\n  }\n  /**\n   * Gain at 2 KHz frequencey.\n   * @default 0\n   */\n  set f2k(value) {\n    this.setGain(_EqualizerFilter.F2K, value);\n  }\n  get f2k() {\n    return this.getGain(_EqualizerFilter.F2K);\n  }\n  /**\n   * Gain at 4 KHz frequencey.\n   * @default 0\n   */\n  set f4k(value) {\n    this.setGain(_EqualizerFilter.F4K, value);\n  }\n  get f4k() {\n    return this.getGain(_EqualizerFilter.F4K);\n  }\n  /**\n   * Gain at 8 KHz frequencey.\n   * @default 0\n   */\n  set f8k(value) {\n    this.setGain(_EqualizerFilter.F8K, value);\n  }\n  get f8k() {\n    return this.getGain(_EqualizerFilter.F8K);\n  }\n  /**\n   * Gain at 16 KHz frequencey.\n   * @default 0\n   */\n  set f16k(value) {\n    this.setGain(_EqualizerFilter.F16K, value);\n  }\n  get f16k() {\n    return this.getGain(_EqualizerFilter.F16K);\n  }\n  /** Reset all frequency bands to have gain of 0 */\n  reset() {\n    this.bands.forEach((band) => {\n      WebAudioUtils.setParamValue(band.gain, 0);\n    });\n  }\n  destroy() {\n    this.bands.forEach((band) => {\n      band.disconnect();\n    });\n    this.bands = null;\n    this.bandsMap = null;\n  }\n};\nlet EqualizerFilter = _EqualizerFilter;\n/**\n * Band at 32 Hz\n * @readonly\n */\nEqualizerFilter.F32 = 32;\n/**\n * Band at 64 Hz\n * @readonly\n */\nEqualizerFilter.F64 = 64;\n/**\n * Band at 125 Hz\n * @readonly\n */\nEqualizerFilter.F125 = 125;\n/**\n * Band at 250 Hz\n * @readonly\n */\nEqualizerFilter.F250 = 250;\n/**\n * Band at 500 Hz\n * @readonly\n */\nEqualizerFilter.F500 = 500;\n/**\n * Band at 1000 Hz\n * @readonly\n */\nEqualizerFilter.F1K = 1e3;\n/**\n * Band at 2000 Hz\n * @readonly\n */\nEqualizerFilter.F2K = 2e3;\n/**\n * Band at 4000 Hz\n * @readonly\n */\nEqualizerFilter.F4K = 4e3;\n/**\n * Band at 8000 Hz\n * @readonly\n */\nEqualizerFilter.F8K = 8e3;\n/**\n * Band at 16000 Hz\n * @readonly\n */\nEqualizerFilter.F16K = 16e3;\n\nexport { EqualizerFilter };\n//# sourceMappingURL=EqualizerFilter.mjs.map\n","import { getInstance } from '../instance.mjs';\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils.mjs';\nimport { Filter } from './Filter.mjs';\n\nclass StereoFilter extends Filter {\n  /** @param pan - The amount of panning, -1 is left, 1 is right, 0 is centered. */\n  constructor(pan = 0) {\n    let stereo;\n    let panner;\n    let destination;\n    if (!getInstance().useLegacy) {\n      const { audioContext } = getInstance().context;\n      if (audioContext.createStereoPanner) {\n        stereo = audioContext.createStereoPanner();\n        destination = stereo;\n      } else {\n        panner = audioContext.createPanner();\n        panner.panningModel = \"equalpower\";\n        destination = panner;\n      }\n    }\n    super(destination);\n    this._stereo = stereo;\n    this._panner = panner;\n    this.pan = pan;\n  }\n  /** Set the amount of panning, where -1 is left, 1 is right, and 0 is centered */\n  set pan(value) {\n    this._pan = value;\n    if (this._stereo) {\n      WebAudioUtils.setParamValue(this._stereo.pan, value);\n    } else if (this._panner) {\n      this._panner.setPosition(value, 0, 1 - Math.abs(value));\n    }\n  }\n  get pan() {\n    return this._pan;\n  }\n  destroy() {\n    super.destroy();\n    this._stereo = null;\n    this._panner = null;\n  }\n}\n\nexport { StereoFilter };\n//# sourceMappingURL=StereoFilter.mjs.map\n","import { EventEmitter } from 'pixi.js';\n\nclass HTMLAudioContext extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** Current global speed from 0 to 1 */\n    this.speed = 1;\n    /** Current muted status of the context */\n    this.muted = false;\n    /** Current volume from 0 to 1  */\n    this.volume = 1;\n    /** Current paused status */\n    this.paused = false;\n  }\n  /** Internal trigger when volume, mute or speed changes */\n  refresh() {\n    this.emit(\"refresh\");\n  }\n  /** Internal trigger paused changes */\n  refreshPaused() {\n    this.emit(\"refreshPaused\");\n  }\n  /**\n   * HTML Audio does not support filters, this is non-functional API.\n   */\n  get filters() {\n    console.warn(\"HTML Audio does not support filters\");\n    return null;\n  }\n  set filters(_filters) {\n    console.warn(\"HTML Audio does not support filters\");\n  }\n  /**\n   * HTML Audio does not support `audioContext`\n   * @readonly\n   * @type {AudioContext}\n   */\n  get audioContext() {\n    console.warn(\"HTML Audio does not support audioContext\");\n    return null;\n  }\n  /**\n   * Toggles the muted state.\n   * @return The current muted state.\n   */\n  toggleMute() {\n    this.muted = !this.muted;\n    this.refresh();\n    return this.muted;\n  }\n  /**\n   * Toggles the paused state.\n   * @return The current paused state.\n   */\n  togglePause() {\n    this.paused = !this.paused;\n    this.refreshPaused();\n    return this.paused;\n  }\n  /** Destroy and don't use after this */\n  destroy() {\n    this.removeAllListeners();\n  }\n}\n\nexport { HTMLAudioContext };\n//# sourceMappingURL=HTMLAudioContext.mjs.map\n","import { EventEmitter, Ticker } from 'pixi.js';\n\nlet id = 0;\nconst _HTMLAudioInstance = class extends EventEmitter {\n  /** @param parent - Parent element */\n  constructor(parent) {\n    super();\n    this.id = id++;\n    this.init(parent);\n  }\n  /**\n   * Set a property by name, this makes it easy to chain values\n   * @param name - Name of the property to set\n   * @param value - Value to set property to\n   */\n  set(name, value) {\n    if (this[name] === void 0) {\n      throw new Error(`Property with name ${name} does not exist.`);\n    } else {\n      switch (name) {\n        case \"speed\":\n          this.speed = value;\n          break;\n        case \"volume\":\n          this.volume = value;\n          break;\n        case \"paused\":\n          this.paused = value;\n          break;\n        case \"loop\":\n          this.loop = value;\n          break;\n        case \"muted\":\n          this.muted = value;\n          break;\n      }\n    }\n    return this;\n  }\n  /** The current playback progress from 0 to 1. */\n  get progress() {\n    const { currentTime } = this._source;\n    return currentTime / this._duration;\n  }\n  /** Pauses the sound. */\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    this._paused = paused;\n    this.refreshPaused();\n  }\n  /**\n   * Reference: http://stackoverflow.com/a/40370077\n   * @private\n   */\n  _onPlay() {\n    this._playing = true;\n  }\n  /**\n   * Reference: http://stackoverflow.com/a/40370077\n   * @private\n   */\n  _onPause() {\n    this._playing = false;\n  }\n  /**\n   * Initialize the instance.\n   * @param {htmlaudio.HTMLAudioMedia} media - Same as constructor\n   */\n  init(media) {\n    this._playing = false;\n    this._duration = media.source.duration;\n    const source = this._source = media.source.cloneNode(false);\n    source.src = media.parent.url;\n    source.onplay = this._onPlay.bind(this);\n    source.onpause = this._onPause.bind(this);\n    media.context.on(\"refresh\", this.refresh, this);\n    media.context.on(\"refreshPaused\", this.refreshPaused, this);\n    this._media = media;\n  }\n  /**\n   * Stop the sound playing\n   * @private\n   */\n  _internalStop() {\n    if (this._source && this._playing) {\n      this._source.onended = null;\n      this._source.pause();\n    }\n  }\n  /** Stop the sound playing */\n  stop() {\n    this._internalStop();\n    if (this._source) {\n      this.emit(\"stop\");\n    }\n  }\n  /** Set the instance speed from 0 to 1 */\n  get speed() {\n    return this._speed;\n  }\n  set speed(speed) {\n    this._speed = speed;\n    this.refresh();\n  }\n  /** Get the set the volume for this instance from 0 to 1 */\n  get volume() {\n    return this._volume;\n  }\n  set volume(volume) {\n    this._volume = volume;\n    this.refresh();\n  }\n  /** If the sound instance should loop playback */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this.refresh();\n  }\n  /** `true` if the sound is muted */\n  get muted() {\n    return this._muted;\n  }\n  set muted(muted) {\n    this._muted = muted;\n    this.refresh();\n  }\n  /**\n   * HTML Audio does not support filters, this is non-functional API.\n   */\n  get filters() {\n    console.warn(\"HTML Audio does not support filters\");\n    return null;\n  }\n  set filters(_filters) {\n    console.warn(\"HTML Audio does not support filters\");\n  }\n  /** Call whenever the loop, speed or volume changes */\n  refresh() {\n    const global = this._media.context;\n    const sound = this._media.parent;\n    this._source.loop = this._loop || sound.loop;\n    const globalVolume = global.volume * (global.muted ? 0 : 1);\n    const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n    const instanceVolume = this._volume * (this._muted ? 0 : 1);\n    this._source.volume = instanceVolume * globalVolume * soundVolume;\n    this._source.playbackRate = this._speed * global.speed * sound.speed;\n  }\n  /** Handle changes in paused state, either globally or sound or instance */\n  refreshPaused() {\n    const global = this._media.context;\n    const sound = this._media.parent;\n    const pausedReal = this._paused || sound.paused || global.paused;\n    if (pausedReal !== this._pausedReal) {\n      this._pausedReal = pausedReal;\n      if (pausedReal) {\n        this._internalStop();\n        this.emit(\"paused\");\n      } else {\n        this.emit(\"resumed\");\n        this.play({\n          start: this._source.currentTime,\n          end: this._end,\n          volume: this._volume,\n          speed: this._speed,\n          loop: this._loop\n        });\n      }\n      this.emit(\"pause\", pausedReal);\n    }\n  }\n  /** Start playing the sound/ */\n  play(options) {\n    const { start, end, speed, loop, volume, muted } = options;\n    if (end) {\n      console.assert(end > start, \"End time is before start time\");\n    }\n    this._speed = speed;\n    this._volume = volume;\n    this._loop = !!loop;\n    this._muted = muted;\n    this.refresh();\n    if (this.loop && end !== null) {\n      console.warn('Looping not support when specifying an \"end\" time');\n      this.loop = false;\n    }\n    this._start = start;\n    this._end = end || this._duration;\n    this._start = Math.max(0, this._start - _HTMLAudioInstance.PADDING);\n    this._end = Math.min(this._end + _HTMLAudioInstance.PADDING, this._duration);\n    this._source.onloadedmetadata = () => {\n      if (this._source) {\n        this._source.currentTime = start;\n        this._source.onloadedmetadata = null;\n        this.emit(\"progress\", start / this._duration, this._duration);\n        Ticker.shared.add(this._onUpdate, this);\n      }\n    };\n    this._source.onended = this._onComplete.bind(this);\n    this._source.play();\n    this.emit(\"start\");\n  }\n  /**\n   * Handle time update on sound.\n   * @private\n   */\n  _onUpdate() {\n    this.emit(\"progress\", this.progress, this._duration);\n    if (this._source.currentTime >= this._end && !this._source.loop) {\n      this._onComplete();\n    }\n  }\n  /**\n   * Callback when completed.\n   * @private\n   */\n  _onComplete() {\n    Ticker.shared.remove(this._onUpdate, this);\n    this._internalStop();\n    this.emit(\"progress\", 1, this._duration);\n    this.emit(\"end\", this);\n  }\n  /** Don't use after this. */\n  destroy() {\n    Ticker.shared.remove(this._onUpdate, this);\n    this.removeAllListeners();\n    const source = this._source;\n    if (source) {\n      source.onended = null;\n      source.onplay = null;\n      source.onpause = null;\n      this._internalStop();\n    }\n    this._source = null;\n    this._speed = 1;\n    this._volume = 1;\n    this._loop = false;\n    this._end = null;\n    this._start = 0;\n    this._duration = 0;\n    this._playing = false;\n    this._pausedReal = false;\n    this._paused = false;\n    this._muted = false;\n    if (this._media) {\n      this._media.context.off(\"refresh\", this.refresh, this);\n      this._media.context.off(\"refreshPaused\", this.refreshPaused, this);\n      this._media = null;\n    }\n  }\n  /**\n   * To string method for instance.\n   * @return The string representation of instance.\n   */\n  toString() {\n    return `[HTMLAudioInstance id=${this.id}]`;\n  }\n};\nlet HTMLAudioInstance = _HTMLAudioInstance;\n/** Extra padding, in seconds, to deal with low-latecy of HTMLAudio. */\nHTMLAudioInstance.PADDING = 0.1;\n\nexport { HTMLAudioInstance };\n//# sourceMappingURL=HTMLAudioInstance.mjs.map\n","import { EventEmitter } from 'pixi.js';\nimport { HTMLAudioInstance } from './HTMLAudioInstance.mjs';\n\nclass HTMLAudioMedia extends EventEmitter {\n  init(parent) {\n    this.parent = parent;\n    this._source = parent.options.source || new Audio();\n    if (parent.url) {\n      this._source.src = parent.url;\n    }\n  }\n  // Implement create\n  create() {\n    return new HTMLAudioInstance(this);\n  }\n  /**\n   * If the audio media is playable (ready).\n   * @readonly\n   */\n  get isPlayable() {\n    return !!this._source && this._source.readyState === 4;\n  }\n  /**\n   * THe duration of the media in seconds.\n   * @readonly\n   */\n  get duration() {\n    return this._source.duration;\n  }\n  /**\n   * Reference to the context.\n   * @readonly\n   */\n  get context() {\n    return this.parent.context;\n  }\n  /** The collection of filters, does not apply to HTML Audio. */\n  get filters() {\n    return null;\n  }\n  set filters(_filters) {\n    console.warn(\"HTML Audio does not support filters\");\n  }\n  // Override the destroy\n  destroy() {\n    this.removeAllListeners();\n    this.parent = null;\n    if (this._source) {\n      this._source.src = \"\";\n      this._source.load();\n      this._source = null;\n    }\n  }\n  /**\n   * Get the audio source element.\n   * @type {HTMLAudioElement}\n   * @readonly\n   */\n  get source() {\n    return this._source;\n  }\n  // Implement the method to being preloading\n  load(callback) {\n    const source = this._source;\n    const sound = this.parent;\n    if (source.readyState === 4) {\n      sound.isLoaded = true;\n      const instance = sound.autoPlayStart();\n      if (callback) {\n        setTimeout(() => {\n          callback(null, sound, instance);\n        }, 0);\n      }\n      return;\n    }\n    if (!sound.url) {\n      callback(new Error(\"sound.url or sound.source must be set\"));\n      return;\n    }\n    source.src = sound.url;\n    const onLoad = () => {\n      removeListeners();\n      sound.isLoaded = true;\n      const instance = sound.autoPlayStart();\n      if (callback) {\n        callback(null, sound, instance);\n      }\n    };\n    const onAbort = () => {\n      removeListeners();\n      if (callback) {\n        callback(new Error(\"Sound loading has been aborted\"));\n      }\n    };\n    const onError = () => {\n      removeListeners();\n      const message = `Failed to load audio element (code: ${source.error.code})`;\n      if (callback) {\n        callback(new Error(message));\n      } else {\n        console.error(message);\n      }\n    };\n    const removeListeners = () => {\n      source.removeEventListener(\"canplaythrough\", onLoad);\n      source.removeEventListener(\"load\", onLoad);\n      source.removeEventListener(\"abort\", onAbort);\n      source.removeEventListener(\"error\", onError);\n    };\n    source.addEventListener(\"canplaythrough\", onLoad, false);\n    source.addEventListener(\"load\", onLoad, false);\n    source.addEventListener(\"abort\", onAbort, false);\n    source.addEventListener(\"error\", onError, false);\n    source.load();\n  }\n}\n\nexport { HTMLAudioMedia };\n//# sourceMappingURL=HTMLAudioMedia.mjs.map\n","class SoundSprite {\n  /**\n   * @param parent - The parent sound\n   * @param options - Data associated with object.\n   */\n  constructor(parent, options) {\n    this.parent = parent;\n    Object.assign(this, options);\n    this.duration = this.end - this.start;\n    console.assert(this.duration > 0, \"End time must be after start time\");\n  }\n  /**\n   * Play the sound sprite.\n   * @param {Function} [complete] - Function call when complete\n   * @return Sound instance being played.\n   */\n  play(complete) {\n    return this.parent.play({\n      complete,\n      speed: this.speed || this.parent.speed,\n      end: this.end,\n      start: this.start,\n      loop: this.loop\n    });\n  }\n  /** Destroy and don't use after this */\n  destroy() {\n    this.parent = null;\n  }\n}\n\nexport { SoundSprite };\n//# sourceMappingURL=SoundSprite.mjs.map\n","const extensions = [\n  \"ogg\",\n  \"oga\",\n  \"opus\",\n  \"m4a\",\n  \"mp3\",\n  \"mpeg\",\n  \"wav\",\n  \"aiff\",\n  \"wma\",\n  \"mid\",\n  \"caf\"\n];\nconst mimes = [\n  \"audio/mpeg\",\n  \"audio/ogg\"\n];\nconst supported = {};\nfunction validateFormats(typeOverrides) {\n  const overrides = {\n    m4a: \"audio/mp4\",\n    oga: \"audio/ogg\",\n    opus: 'audio/ogg; codecs=\"opus\"',\n    caf: 'audio/x-caf; codecs=\"opus\"',\n    ...typeOverrides || {}\n  };\n  const audio = document.createElement(\"audio\");\n  const formats = {};\n  const no = /^no$/;\n  extensions.forEach((ext) => {\n    const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, \"\");\n    const canByType = overrides[ext] ? audio.canPlayType(overrides[ext]).replace(no, \"\") : \"\";\n    formats[ext] = !!canByExt || !!canByType;\n  });\n  Object.assign(supported, formats);\n}\nvalidateFormats();\n\nexport { extensions, mimes, supported, validateFormats };\n//# sourceMappingURL=supported.mjs.map\n","import { EventEmitter, Ticker } from 'pixi.js';\nimport { WebAudioUtils } from './WebAudioUtils.mjs';\n\nlet id = 0;\nclass WebAudioInstance extends EventEmitter {\n  constructor(media) {\n    super();\n    this.id = id++;\n    this._media = null;\n    this._paused = false;\n    this._muted = false;\n    this._elapsed = 0;\n    this.init(media);\n  }\n  /**\n   * Set a property by name, this makes it easy to chain values\n   * @param name - Name of the property to set.\n   * @param value - Value to set property to.\n   */\n  set(name, value) {\n    if (this[name] === void 0) {\n      throw new Error(`Property with name ${name} does not exist.`);\n    } else {\n      switch (name) {\n        case \"speed\":\n          this.speed = value;\n          break;\n        case \"volume\":\n          this.volume = value;\n          break;\n        case \"muted\":\n          this.muted = value;\n          break;\n        case \"loop\":\n          this.loop = value;\n          break;\n        case \"paused\":\n          this.paused = value;\n          break;\n      }\n    }\n    return this;\n  }\n  /** Stops the instance, don't use after this. */\n  stop() {\n    if (this._source) {\n      this._internalStop();\n      this.emit(\"stop\");\n    }\n  }\n  /** Set the instance speed from 0 to 1 */\n  get speed() {\n    return this._speed;\n  }\n  set speed(speed) {\n    this._speed = speed;\n    this.refresh();\n    this._update(true);\n  }\n  /** Get the set the volume for this instance from 0 to 1 */\n  get volume() {\n    return this._volume;\n  }\n  set volume(volume) {\n    this._volume = volume;\n    this.refresh();\n  }\n  /** `true` if the sound is muted */\n  get muted() {\n    return this._muted;\n  }\n  set muted(muted) {\n    this._muted = muted;\n    this.refresh();\n  }\n  /** If the sound instance should loop playback */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this.refresh();\n  }\n  /** The collection of filters. */\n  get filters() {\n    return this._filters;\n  }\n  set filters(filters) {\n    if (this._filters) {\n      this._filters?.filter((filter) => filter).forEach((filter) => filter.disconnect());\n      this._filters = null;\n      this._source.connect(this._gain);\n    }\n    this._filters = filters?.length ? filters.slice(0) : null;\n    this.refresh();\n  }\n  /** Refresh loop, volume and speed based on changes to parent */\n  refresh() {\n    if (!this._source) {\n      return;\n    }\n    const global = this._media.context;\n    const sound = this._media.parent;\n    this._source.loop = this._loop || sound.loop;\n    const globalVolume = global.volume * (global.muted ? 0 : 1);\n    const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n    const instanceVolume = this._volume * (this._muted ? 0 : 1);\n    WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\n    WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\n    this.applyFilters();\n  }\n  /** Connect filters nodes to audio context */\n  applyFilters() {\n    if (this._filters?.length) {\n      this._source.disconnect();\n      let source = this._source;\n      this._filters.forEach((filter) => {\n        source.connect(filter.destination);\n        source = filter;\n      });\n      source.connect(this._gain);\n    }\n  }\n  /** Handle changes in paused state, either globally or sound or instance */\n  refreshPaused() {\n    const global = this._media.context;\n    const sound = this._media.parent;\n    const pausedReal = this._paused || sound.paused || global.paused;\n    if (pausedReal !== this._pausedReal) {\n      this._pausedReal = pausedReal;\n      if (pausedReal) {\n        this._internalStop();\n        this.emit(\"paused\");\n      } else {\n        this.emit(\"resumed\");\n        this.play({\n          start: this._elapsed % this._duration,\n          end: this._end,\n          speed: this._speed,\n          loop: this._loop,\n          volume: this._volume\n        });\n      }\n      this.emit(\"pause\", pausedReal);\n    }\n  }\n  /**\n   * Plays the sound.\n   * @param options - Play options.\n   */\n  play(options) {\n    const { start, end, speed, loop, volume, muted, filters } = options;\n    if (end) {\n      console.assert(end > start, \"End time is before start time\");\n    }\n    this._paused = false;\n    const { source, gain } = this._media.nodes.cloneBufferSource();\n    this._source = source;\n    this._gain = gain;\n    this._speed = speed;\n    this._volume = volume;\n    this._loop = !!loop;\n    this._muted = muted;\n    this._filters = filters;\n    this.refresh();\n    const duration = this._source.buffer.duration;\n    this._duration = duration;\n    this._end = end;\n    this._lastUpdate = this._now();\n    this._elapsed = start;\n    this._source.onended = this._onComplete.bind(this);\n    if (this._loop) {\n      this._source.loopEnd = end;\n      this._source.loopStart = start;\n      this._source.start(0, start);\n    } else if (end) {\n      this._source.start(0, start, end - start);\n    } else {\n      this._source.start(0, start);\n    }\n    this.emit(\"start\");\n    this._update(true);\n    this.enableTicker(true);\n  }\n  /** Start the update progress. */\n  enableTicker(enabled) {\n    Ticker.shared.remove(this._updateListener, this);\n    if (enabled) {\n      Ticker.shared.add(this._updateListener, this);\n    }\n  }\n  /** The current playback progress from 0 to 1. */\n  get progress() {\n    return this._progress;\n  }\n  /** Pauses the sound. */\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    this._paused = paused;\n    this.refreshPaused();\n  }\n  /** Don't use after this. */\n  destroy() {\n    this.removeAllListeners();\n    this._internalStop();\n    if (this._gain) {\n      this._gain.disconnect();\n      this._gain = null;\n    }\n    if (this._media) {\n      this._media.context.events.off(\"refresh\", this.refresh, this);\n      this._media.context.events.off(\"refreshPaused\", this.refreshPaused, this);\n      this._media = null;\n    }\n    this._filters?.forEach((filter) => filter.disconnect());\n    this._filters = null;\n    this._end = null;\n    this._speed = 1;\n    this._volume = 1;\n    this._loop = false;\n    this._elapsed = 0;\n    this._duration = 0;\n    this._paused = false;\n    this._muted = false;\n    this._pausedReal = false;\n  }\n  /**\n   * To string method for instance.\n   * @return The string representation of instance.\n   */\n  toString() {\n    return `[WebAudioInstance id=${this.id}]`;\n  }\n  /**\n   * Get the current time in seconds.\n   * @return Seconds since start of context\n   */\n  _now() {\n    return this._media.context.audioContext.currentTime;\n  }\n  /** Callback for update listener */\n  _updateListener() {\n    this._update();\n  }\n  /** Internal update the progress. */\n  _update(force = false) {\n    if (this._source) {\n      const now = this._now();\n      const delta = now - this._lastUpdate;\n      if (delta > 0 || force) {\n        const speed = this._source.playbackRate.value;\n        this._elapsed += delta * speed;\n        this._lastUpdate = now;\n        const duration = this._duration;\n        let progress;\n        if (this._source.loopStart) {\n          const soundLength = this._source.loopEnd - this._source.loopStart;\n          progress = (this._source.loopStart + this._elapsed % soundLength) / duration;\n        } else {\n          progress = this._elapsed % duration / duration;\n        }\n        this._progress = progress;\n        this.emit(\"progress\", this._progress, duration);\n      }\n    }\n  }\n  /** Initializes the instance. */\n  init(media) {\n    this._media = media;\n    media.context.events.on(\"refresh\", this.refresh, this);\n    media.context.events.on(\"refreshPaused\", this.refreshPaused, this);\n  }\n  /** Stops the instance. */\n  _internalStop() {\n    if (this._source) {\n      this.enableTicker(false);\n      this._source.onended = null;\n      this._source.stop(0);\n      this._source.disconnect();\n      try {\n        this._source.buffer = null;\n      } catch (err) {\n        console.warn(\"Failed to set AudioBufferSourceNode.buffer to null:\", err);\n      }\n      this._source = null;\n    }\n  }\n  /** Callback when completed. */\n  _onComplete() {\n    if (this._source) {\n      this.enableTicker(false);\n      this._source.onended = null;\n      this._source.disconnect();\n      try {\n        this._source.buffer = null;\n      } catch (err) {\n        console.warn(\"Failed to set AudioBufferSourceNode.buffer to null:\", err);\n      }\n    }\n    this._source = null;\n    this._progress = 1;\n    this.emit(\"progress\", 1, this._duration);\n    this.emit(\"end\", this);\n  }\n}\n\nexport { WebAudioInstance };\n//# sourceMappingURL=WebAudioInstance.mjs.map\n","class Filterable {\n  /**\n   * @param input - The source audio node\n   * @param output - The output audio node\n   */\n  constructor(input, output) {\n    this._output = output;\n    this._input = input;\n  }\n  /** The destination output audio node */\n  get destination() {\n    return this._input;\n  }\n  /** The collection of filters. */\n  get filters() {\n    return this._filters;\n  }\n  set filters(filters) {\n    if (this._filters) {\n      this._filters.forEach((filter) => {\n        if (filter) {\n          filter.disconnect();\n        }\n      });\n      this._filters = null;\n      this._input.connect(this._output);\n    }\n    if (filters && filters.length) {\n      this._filters = filters.slice(0);\n      this._input.disconnect();\n      let prevFilter = null;\n      filters.forEach((filter) => {\n        if (prevFilter === null) {\n          this._input.connect(filter.destination);\n        } else {\n          prevFilter.connect(filter.destination);\n        }\n        prevFilter = filter;\n      });\n      prevFilter.connect(this._output);\n    }\n  }\n  /** Cleans up. */\n  destroy() {\n    this.filters = null;\n    this._input = null;\n    this._output = null;\n  }\n}\n\nexport { Filterable };\n//# sourceMappingURL=Filterable.mjs.map\n","import { Filterable } from '../Filterable.mjs';\nimport { WebAudioUtils } from './WebAudioUtils.mjs';\n\nconst _WebAudioNodes = class extends Filterable {\n  /**\n   * @param context - The audio context.\n   */\n  constructor(context) {\n    const audioContext = context.audioContext;\n    const bufferSource = audioContext.createBufferSource();\n    const gain = audioContext.createGain();\n    const analyser = audioContext.createAnalyser();\n    bufferSource.connect(analyser);\n    analyser.connect(gain);\n    gain.connect(context.destination);\n    super(analyser, gain);\n    this.context = context;\n    this.bufferSource = bufferSource;\n    this.gain = gain;\n    this.analyser = analyser;\n  }\n  /**\n   * Get the script processor node.\n   * @readonly\n   */\n  get script() {\n    if (!this._script) {\n      this._script = this.context.audioContext.createScriptProcessor(_WebAudioNodes.BUFFER_SIZE);\n      this._script.connect(this.context.destination);\n    }\n    return this._script;\n  }\n  /** Cleans up. */\n  destroy() {\n    super.destroy();\n    this.bufferSource.disconnect();\n    if (this._script) {\n      this._script.disconnect();\n    }\n    this.gain.disconnect();\n    this.analyser.disconnect();\n    this.bufferSource = null;\n    this._script = null;\n    this.gain = null;\n    this.analyser = null;\n    this.context = null;\n  }\n  /**\n   * Clones the bufferSource. Used just before playing a sound.\n   * @returns {SourceClone} The clone AudioBufferSourceNode.\n   */\n  cloneBufferSource() {\n    const orig = this.bufferSource;\n    const source = this.context.audioContext.createBufferSource();\n    source.buffer = orig.buffer;\n    WebAudioUtils.setParamValue(source.playbackRate, orig.playbackRate.value);\n    source.loop = orig.loop;\n    const gain = this.context.audioContext.createGain();\n    source.connect(gain);\n    gain.connect(this.destination);\n    return { source, gain };\n  }\n  /**\n   * Get buffer size of `ScriptProcessorNode`.\n   * @readonly\n   */\n  get bufferSize() {\n    return this.script.bufferSize;\n  }\n};\nlet WebAudioNodes = _WebAudioNodes;\n/**\n * The buffer size for script processor, default is `0` which auto-detects. If you plan to use\n * script node on iOS, you'll need to provide a non-zero amount.\n * @default 0\n */\nWebAudioNodes.BUFFER_SIZE = 0;\n\nexport { WebAudioNodes };\n//# sourceMappingURL=WebAudioNodes.mjs.map\n","import { DOMAdapter } from 'pixi.js';\nimport { WebAudioInstance } from './WebAudioInstance.mjs';\nimport { WebAudioNodes } from './WebAudioNodes.mjs';\n\nclass WebAudioMedia {\n  /**\n   * Re-initialize without constructing.\n   * @param parent - - Instance of parent Sound container\n   */\n  init(parent) {\n    this.parent = parent;\n    this._nodes = new WebAudioNodes(this.context);\n    this._source = this._nodes.bufferSource;\n    this.source = parent.options.source;\n  }\n  /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n  destroy() {\n    this.parent = null;\n    this._nodes.destroy();\n    this._nodes = null;\n    try {\n      this._source.buffer = null;\n    } catch (err) {\n      console.warn(\"Failed to set AudioBufferSourceNode.buffer to null:\", err);\n    }\n    this._source = null;\n    this.source = null;\n  }\n  // Implement create\n  create() {\n    return new WebAudioInstance(this);\n  }\n  // Implement context\n  get context() {\n    return this.parent.context;\n  }\n  // Implement isPlayable\n  get isPlayable() {\n    return !!this._source && !!this._source.buffer;\n  }\n  // Implement filters\n  get filters() {\n    return this._nodes.filters;\n  }\n  set filters(filters) {\n    this._nodes.filters = filters;\n  }\n  // Implements duration\n  get duration() {\n    console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n    return this._source.buffer.duration;\n  }\n  /** Gets and sets the buffer. */\n  get buffer() {\n    return this._source.buffer;\n  }\n  set buffer(buffer) {\n    this._source.buffer = buffer;\n  }\n  /** Get the current chained nodes object */\n  get nodes() {\n    return this._nodes;\n  }\n  // Implements load\n  load(callback) {\n    if (this.source) {\n      this._decode(this.source, callback);\n    } else if (this.parent.url) {\n      this._loadUrl(callback);\n    } else if (callback) {\n      callback(new Error(\"sound.url or sound.source must be set\"));\n    } else {\n      console.error(\"sound.url or sound.source must be set\");\n    }\n  }\n  /** Loads a sound using XHMLHttpRequest object. */\n  async _loadUrl(callback) {\n    const url = this.parent.url;\n    const response = await DOMAdapter.get().fetch(url);\n    this._decode(await response.arrayBuffer(), callback);\n  }\n  /**\n   * Decodes the array buffer.\n   * @param arrayBuffer - From load.\n   * @param {Function} callback - Callback optional\n   */\n  _decode(arrayBuffer, callback) {\n    const audioBufferReadyFn = (err, buffer) => {\n      if (err) {\n        if (callback) {\n          callback(err);\n        }\n      } else {\n        this.parent.isLoaded = true;\n        this.buffer = buffer;\n        const instance = this.parent.autoPlayStart();\n        if (callback) {\n          callback(null, this.parent, instance);\n        }\n      }\n    };\n    if (arrayBuffer instanceof AudioBuffer) {\n      audioBufferReadyFn(null, arrayBuffer);\n    } else {\n      const context = this.parent.context;\n      context.decode(arrayBuffer, audioBufferReadyFn);\n    }\n  }\n}\n\nexport { WebAudioMedia };\n//# sourceMappingURL=WebAudioMedia.mjs.map\n","import { path } from 'pixi.js';\nimport { HTMLAudioMedia } from './htmlaudio/HTMLAudioMedia.mjs';\nimport { getInstance } from './instance.mjs';\nimport { SoundSprite } from './SoundSprite.mjs';\nimport { supported, extensions } from './utils/supported.mjs';\nimport { WebAudioMedia } from './webaudio/WebAudioMedia.mjs';\n\nconst _Sound = class {\n  /**\n   * Create a new sound instance from source.\n   * @param source - Either the path or url to the source file.\n   *        or the object of options to use.\n   * @return Created sound instance.\n   */\n  static from(source) {\n    let options = {};\n    if (typeof source === \"string\") {\n      options.url = source;\n    } else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement) {\n      options.source = source;\n    } else if (Array.isArray(source)) {\n      options.url = source;\n    } else {\n      options = source;\n    }\n    options = {\n      autoPlay: false,\n      singleInstance: false,\n      url: null,\n      source: null,\n      preload: false,\n      volume: 1,\n      speed: 1,\n      complete: null,\n      loaded: null,\n      loop: false,\n      ...options\n    };\n    Object.freeze(options);\n    const media = getInstance().useLegacy ? new HTMLAudioMedia() : new WebAudioMedia();\n    return new _Sound(media, options);\n  }\n  /**\n   * Use `Sound.from`\n   * @ignore\n   */\n  constructor(media, options) {\n    this.media = media;\n    this.options = options;\n    this._instances = [];\n    this._sprites = {};\n    this.media.init(this);\n    const complete = options.complete;\n    this._autoPlayOptions = complete ? { complete } : null;\n    this.isLoaded = false;\n    this._preloadQueue = null;\n    this.isPlaying = false;\n    this.autoPlay = options.autoPlay;\n    this.singleInstance = options.singleInstance;\n    this.preload = options.preload || this.autoPlay;\n    this.url = Array.isArray(options.url) ? this.preferUrl(options.url) : options.url;\n    this.speed = options.speed;\n    this.volume = options.volume;\n    this.loop = options.loop;\n    if (options.sprites) {\n      this.addSprites(options.sprites);\n    }\n    if (this.preload) {\n      this._preload(options.loaded);\n    }\n  }\n  /**\n   * Internal help for resolving which file to use if there are multiple provide\n   * this is especially helpful for working with bundlers (non Assets loading).\n   */\n  preferUrl(urls) {\n    const [file] = urls.map((url) => ({ url, ext: path.extname(url).slice(1) })).filter(({ ext }) => supported[ext]).sort((a, b) => extensions.indexOf(a.ext) - extensions.indexOf(b.ext));\n    if (!file) {\n      throw new Error(\"No supported file type found\");\n    }\n    return file.url;\n  }\n  /** Instance of the media context. */\n  get context() {\n    return getInstance().context;\n  }\n  /** Stops all the instances of this sound from playing. */\n  pause() {\n    this.isPlaying = false;\n    this.paused = true;\n    return this;\n  }\n  /** Resuming all the instances of this sound from playing */\n  resume() {\n    this.isPlaying = this._instances.length > 0;\n    this.paused = false;\n    return this;\n  }\n  /** Stops all the instances of this sound from playing. */\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    this._paused = paused;\n    this.refreshPaused();\n  }\n  /** The playback rate. */\n  get speed() {\n    return this._speed;\n  }\n  set speed(speed) {\n    this._speed = speed;\n    this.refresh();\n  }\n  /** Set the filters. Only supported with WebAudio. */\n  get filters() {\n    return this.media.filters;\n  }\n  set filters(filters) {\n    this.media.filters = filters;\n  }\n  /**\n   * @ignore\n   */\n  addSprites(source, data) {\n    if (typeof source === \"object\") {\n      const results = {};\n      for (const alias in source) {\n        results[alias] = this.addSprites(alias, source[alias]);\n      }\n      return results;\n    }\n    console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n    const sprite = new SoundSprite(this, data);\n    this._sprites[source] = sprite;\n    return sprite;\n  }\n  /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n  destroy() {\n    this._removeInstances();\n    this.removeSprites();\n    this.media.destroy();\n    this.media = null;\n    this._sprites = null;\n    this._instances = null;\n  }\n  /**\n   * Remove a sound sprite.\n   * @param alias - The unique name of the sound sprite, if alias is omitted, removes all sprites.\n   */\n  removeSprites(alias) {\n    if (!alias) {\n      for (const name in this._sprites) {\n        this.removeSprites(name);\n      }\n    } else {\n      const sprite = this._sprites[alias];\n      if (sprite !== void 0) {\n        sprite.destroy();\n        delete this._sprites[alias];\n      }\n    }\n    return this;\n  }\n  /** If the current sound is playable (loaded). */\n  get isPlayable() {\n    return this.isLoaded && this.media && this.media.isPlayable;\n  }\n  /** Stops all the instances of this sound from playing. */\n  stop() {\n    if (!this.isPlayable) {\n      this.autoPlay = false;\n      this._autoPlayOptions = null;\n      return this;\n    }\n    this.isPlaying = false;\n    for (let i = this._instances.length - 1; i >= 0; i--) {\n      this._instances[i].stop();\n    }\n    return this;\n  }\n  // Overloaded function\n  play(source, complete) {\n    let options;\n    if (typeof source === \"string\") {\n      const sprite = source;\n      options = { sprite, loop: this.loop, complete };\n    } else if (typeof source === \"function\") {\n      options = {};\n      options.complete = source;\n    } else {\n      options = source;\n    }\n    options = {\n      complete: null,\n      loaded: null,\n      sprite: null,\n      end: null,\n      start: 0,\n      volume: 1,\n      speed: 1,\n      muted: false,\n      loop: false,\n      ...options || {}\n    };\n    if (options.sprite) {\n      const alias = options.sprite;\n      console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n      const sprite = this._sprites[alias];\n      options.start = sprite.start + (options.start || 0);\n      options.end = sprite.end;\n      options.speed = sprite.speed || 1;\n      options.loop = sprite.loop || options.loop;\n      delete options.sprite;\n    }\n    if (options.offset) {\n      options.start = options.offset;\n    }\n    if (!this.isLoaded) {\n      if (this._preloadQueue) {\n        return new Promise((resolve) => {\n          this._preloadQueue.push(() => {\n            resolve(this.play(options));\n          });\n        });\n      }\n      this._preloadQueue = [];\n      this.autoPlay = true;\n      this._autoPlayOptions = options;\n      return new Promise((resolve, reject) => {\n        this._preload((err, sound, media) => {\n          this._preloadQueue.forEach((resolve2) => resolve2());\n          this._preloadQueue = null;\n          if (err) {\n            reject(err);\n          } else {\n            if (options.loaded) {\n              options.loaded(err, sound, media);\n            }\n            resolve(media);\n          }\n        });\n      });\n    }\n    if (this.singleInstance || options.singleInstance) {\n      this._removeInstances();\n    }\n    const instance = this._createInstance();\n    this._instances.push(instance);\n    this.isPlaying = true;\n    instance.once(\"end\", () => {\n      if (options.complete) {\n        options.complete(this);\n      }\n      this._onComplete(instance);\n    });\n    instance.once(\"stop\", () => {\n      this._onComplete(instance);\n    });\n    instance.play(options);\n    return instance;\n  }\n  /** Internal only, speed, loop, volume change occured. */\n  refresh() {\n    const len = this._instances.length;\n    for (let i = 0; i < len; i++) {\n      this._instances[i].refresh();\n    }\n  }\n  /** Handle changes in paused state. Internal only. */\n  refreshPaused() {\n    const len = this._instances.length;\n    for (let i = 0; i < len; i++) {\n      this._instances[i].refreshPaused();\n    }\n  }\n  /** Gets and sets the volume. */\n  get volume() {\n    return this._volume;\n  }\n  set volume(volume) {\n    this._volume = volume;\n    this.refresh();\n  }\n  /** Gets and sets the muted flag. */\n  get muted() {\n    return this._muted;\n  }\n  set muted(muted) {\n    this._muted = muted;\n    this.refresh();\n  }\n  /** Gets and sets the looping. */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this.refresh();\n  }\n  /** Starts the preloading of sound. */\n  _preload(callback) {\n    this.media.load(callback);\n  }\n  /** Gets the list of instances that are currently being played of this sound. */\n  get instances() {\n    return this._instances;\n  }\n  /** Get the map of sprites. */\n  get sprites() {\n    return this._sprites;\n  }\n  /** Get the duration of the audio in seconds. */\n  get duration() {\n    return this.media.duration;\n  }\n  /** Auto play the first instance. */\n  autoPlayStart() {\n    let instance;\n    if (this.autoPlay) {\n      instance = this.play(this._autoPlayOptions);\n    }\n    return instance;\n  }\n  /** Removes all instances. */\n  _removeInstances() {\n    for (let i = this._instances.length - 1; i >= 0; i--) {\n      this._poolInstance(this._instances[i]);\n    }\n    this._instances.length = 0;\n  }\n  /**\n   * Sound instance completed.\n   * @param instance\n   */\n  _onComplete(instance) {\n    if (this._instances) {\n      const index = this._instances.indexOf(instance);\n      if (index > -1) {\n        this._instances.splice(index, 1);\n      }\n      this.isPlaying = this._instances.length > 0;\n    }\n    this._poolInstance(instance);\n  }\n  /** Create a new instance. */\n  _createInstance() {\n    if (_Sound._pool.length > 0) {\n      const instance = _Sound._pool.pop();\n      instance.init(this.media);\n      return instance;\n    }\n    return this.media.create();\n  }\n  /**\n   * Destroy/recycling the instance object.\n   * @param instance - Instance to recycle\n   */\n  _poolInstance(instance) {\n    instance.destroy();\n    if (_Sound._pool.indexOf(instance) < 0) {\n      _Sound._pool.push(instance);\n    }\n  }\n};\nlet Sound = _Sound;\n/** Pool of instances */\nSound._pool = [];\n\nexport { Sound };\n//# sourceMappingURL=Sound.mjs.map\n","import { EventEmitter } from 'pixi.js';\nimport { Filterable } from '../Filterable.mjs';\n\nclass WebAudioContext extends Filterable {\n  constructor() {\n    const win = window;\n    const ctx = new WebAudioContext.AudioContext();\n    const compressor = ctx.createDynamicsCompressor();\n    const analyser = ctx.createAnalyser();\n    analyser.connect(compressor);\n    compressor.connect(ctx.destination);\n    super(analyser, compressor);\n    /** Set to false ignore suspending when window is blurred */\n    this.autoPause = true;\n    this._ctx = ctx;\n    this._offlineCtx = new WebAudioContext.OfflineAudioContext(\n      1,\n      2,\n      win.OfflineAudioContext ? Math.max(8e3, Math.min(96e3, ctx.sampleRate)) : 44100\n    );\n    this.compressor = compressor;\n    this.analyser = analyser;\n    this.events = new EventEmitter();\n    this.volume = 1;\n    this.speed = 1;\n    this.muted = false;\n    this.paused = false;\n    this._locked = ctx.state === \"suspended\" && (\"ontouchstart\" in globalThis || \"onclick\" in globalThis);\n    if (this._locked) {\n      this._unlock();\n      this._unlock = this._unlock.bind(this);\n      document.addEventListener(\"mousedown\", this._unlock, true);\n      document.addEventListener(\"touchstart\", this._unlock, true);\n      document.addEventListener(\"touchend\", this._unlock, true);\n    }\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    globalThis.addEventListener(\"focus\", this.onFocus);\n    globalThis.addEventListener(\"blur\", this.onBlur);\n  }\n  /** Handle mobile WebAudio context resume */\n  onFocus() {\n    if (!this.autoPause) {\n      return;\n    }\n    const state = this._ctx.state;\n    if (state === \"suspended\" || state === \"interrupted\" || !this._locked) {\n      this.paused = this._pausedOnBlur;\n      this.refreshPaused();\n    }\n  }\n  /** Handle mobile WebAudio context suspend */\n  onBlur() {\n    if (!this.autoPause) {\n      return;\n    }\n    if (!this._locked) {\n      this._pausedOnBlur = this._paused;\n      this.paused = true;\n      this.refreshPaused();\n    }\n  }\n  /**\n   * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n   * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n   * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n   *\n   * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n   * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n   * stick with `mousedown` and `touchend`.\n   */\n  _unlock() {\n    if (!this._locked) {\n      return;\n    }\n    this.playEmptySound();\n    if (this._ctx.state === \"running\") {\n      document.removeEventListener(\"mousedown\", this._unlock, true);\n      document.removeEventListener(\"touchend\", this._unlock, true);\n      document.removeEventListener(\"touchstart\", this._unlock, true);\n      this._locked = false;\n    }\n  }\n  /**\n   * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n   * require the first sound to be played inside of a user initiated event (touch/click).\n   */\n  playEmptySound() {\n    const source = this._ctx.createBufferSource();\n    source.buffer = this._ctx.createBuffer(1, 1, 22050);\n    source.connect(this._ctx.destination);\n    source.start(0, 0, 0);\n    if (source.context.state === \"suspended\") {\n      source.context.resume();\n    }\n  }\n  /**\n   * Get AudioContext class, if not supported returns `null`\n   * @type {AudioContext}\n   * @readonly\n   */\n  static get AudioContext() {\n    const win = window;\n    return win.AudioContext || win.webkitAudioContext || null;\n  }\n  /**\n   * Get OfflineAudioContext class, if not supported returns `null`\n   * @type {OfflineAudioContext}\n   * @readonly\n   */\n  static get OfflineAudioContext() {\n    const win = window;\n    return win.OfflineAudioContext || win.webkitOfflineAudioContext || null;\n  }\n  /** Destroy this context. */\n  destroy() {\n    super.destroy();\n    const ctx = this._ctx;\n    if (typeof ctx.close !== \"undefined\") {\n      ctx.close();\n    }\n    globalThis.removeEventListener(\"focus\", this.onFocus);\n    globalThis.removeEventListener(\"blur\", this.onBlur);\n    this.events.removeAllListeners();\n    this.analyser.disconnect();\n    this.compressor.disconnect();\n    this.analyser = null;\n    this.compressor = null;\n    this.events = null;\n    this._offlineCtx = null;\n    this._ctx = null;\n  }\n  /**\n   * The WebAudio API AudioContext object.\n   * @readonly\n   * @type {AudioContext}\n   */\n  get audioContext() {\n    return this._ctx;\n  }\n  /**\n   * The WebAudio API OfflineAudioContext object.\n   * @readonly\n   * @type {OfflineAudioContext}\n   */\n  get offlineContext() {\n    return this._offlineCtx;\n  }\n  /**\n   * Pauses all sounds, even though we handle this at the instance\n   * level, we'll also pause the audioContext so that the\n   * time used to compute progress isn't messed up.\n   * @default false\n   */\n  set paused(paused) {\n    if (paused && this._ctx.state === \"running\") {\n      this._ctx.suspend();\n    } else if (!paused && this._ctx.state === \"suspended\") {\n      this._ctx.resume();\n    }\n    this._paused = paused;\n  }\n  get paused() {\n    return this._paused;\n  }\n  /** Emit event when muted, volume or speed changes */\n  refresh() {\n    this.events.emit(\"refresh\");\n  }\n  /** Emit event when muted, volume or speed changes */\n  refreshPaused() {\n    this.events.emit(\"refreshPaused\");\n  }\n  /**\n   * Toggles the muted state.\n   * @return The current muted state.\n   */\n  toggleMute() {\n    this.muted = !this.muted;\n    this.refresh();\n    return this.muted;\n  }\n  /**\n   * Toggles the paused state.\n   * @return The current muted state.\n   */\n  togglePause() {\n    this.paused = !this.paused;\n    this.refreshPaused();\n    return this._paused;\n  }\n  /**\n   * Decode the audio data\n   * @param arrayBuffer - Buffer from loader\n   * @param callback - When completed, error and audioBuffer are parameters.\n   */\n  decode(arrayBuffer, callback) {\n    const handleError = (err) => {\n      callback(new Error(err?.message || \"Unable to decode file\"));\n    };\n    const result = this._offlineCtx.decodeAudioData(\n      arrayBuffer,\n      (buffer) => {\n        callback(null, buffer);\n      },\n      handleError\n    );\n    if (result) {\n      result.catch(handleError);\n    }\n  }\n}\n\nexport { WebAudioContext };\n//# sourceMappingURL=WebAudioContext.mjs.map\n","import { HTMLAudioContext } from './htmlaudio/HTMLAudioContext.mjs';\nimport { Sound } from './Sound.mjs';\nimport { WebAudioContext } from './webaudio/WebAudioContext.mjs';\n\nclass SoundLibrary {\n  constructor() {\n    this.init();\n  }\n  /**\n   * Re-initialize the sound library, this will\n   * recreate the AudioContext. If there's a hardware-failure\n   * call `close` and then `init`.\n   * @return Sound instance\n   */\n  init() {\n    if (this.supported) {\n      this._webAudioContext = new WebAudioContext();\n    }\n    this._htmlAudioContext = new HTMLAudioContext();\n    this._sounds = {};\n    this.useLegacy = !this.supported;\n    return this;\n  }\n  /**\n   * The global context to use.\n   * @readonly\n   */\n  get context() {\n    return this._context;\n  }\n  /**\n   * Apply filters to all sounds. Can be useful\n   * for setting global planning or global effects.\n   * **Only supported with WebAudio.**\n   * @example\n   * import { sound, filters } from '@pixi/sound';\n   * // Adds a filter to pan all output left\n   * sound.filtersAll = [\n   *     new filters.StereoFilter(-1)\n   * ];\n   */\n  get filtersAll() {\n    if (!this.useLegacy) {\n      return this._context.filters;\n    }\n    return [];\n  }\n  set filtersAll(filtersAll) {\n    if (!this.useLegacy) {\n      this._context.filters = filtersAll;\n    }\n  }\n  /**\n   * `true` if WebAudio is supported on the current browser.\n   */\n  get supported() {\n    return WebAudioContext.AudioContext !== null;\n  }\n  /**\n   * @ignore\n   */\n  add(source, sourceOptions) {\n    if (typeof source === \"object\") {\n      const results = {};\n      for (const alias in source) {\n        const options2 = this._getOptions(\n          source[alias],\n          sourceOptions\n        );\n        results[alias] = this.add(alias, options2);\n      }\n      return results;\n    }\n    console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n    if (sourceOptions instanceof Sound) {\n      this._sounds[source] = sourceOptions;\n      return sourceOptions;\n    }\n    const options = this._getOptions(sourceOptions);\n    const sound = Sound.from(options);\n    this._sounds[source] = sound;\n    return sound;\n  }\n  /**\n   * Internal methods for getting the options object\n   * @private\n   * @param source - The source options\n   * @param overrides - Override default options\n   * @return The construction options\n   */\n  _getOptions(source, overrides) {\n    let options;\n    if (typeof source === \"string\") {\n      options = { url: source };\n    } else if (Array.isArray(source)) {\n      options = { url: source };\n    } else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement) {\n      options = { source };\n    } else {\n      options = source;\n    }\n    options = { ...options, ...overrides || {} };\n    return options;\n  }\n  /**\n   * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n   */\n  get useLegacy() {\n    return this._useLegacy;\n  }\n  set useLegacy(legacy) {\n    this._useLegacy = legacy;\n    this._context = !legacy && this.supported ? this._webAudioContext : this._htmlAudioContext;\n  }\n  /**\n   * This disables auto-pause all playback when the window blurs (WebAudio only).\n   * This is helpful to keep from playing sounds when the user switches tabs.\n   * However, if you're running content within an iframe, this may be undesirable\n   * and you should disable (set to `true`) this behavior.\n   * @default false\n   */\n  get disableAutoPause() {\n    return !this._webAudioContext.autoPause;\n  }\n  set disableAutoPause(autoPause) {\n    this._webAudioContext.autoPause = !autoPause;\n  }\n  /**\n   * Removes a sound by alias.\n   * @param alias - The sound alias reference.\n   * @return Instance for chaining.\n   */\n  remove(alias) {\n    this.exists(alias, true);\n    this._sounds[alias].destroy();\n    delete this._sounds[alias];\n    return this;\n  }\n  /**\n   * Set the global volume for all sounds. To set per-sound volume see {@link SoundLibrary#volume}.\n   */\n  get volumeAll() {\n    return this._context.volume;\n  }\n  set volumeAll(volume) {\n    this._context.volume = volume;\n    this._context.refresh();\n  }\n  /**\n   * Set the global speed for all sounds. To set per-sound speed see {@link SoundLibrary#speed}.\n   */\n  get speedAll() {\n    return this._context.speed;\n  }\n  set speedAll(speed) {\n    this._context.speed = speed;\n    this._context.refresh();\n  }\n  /**\n   * Toggle paused property for all sounds.\n   * @return `true` if all sounds are paused.\n   */\n  togglePauseAll() {\n    return this._context.togglePause();\n  }\n  /**\n   * Pauses any playing sounds.\n   * @return Instance for chaining.\n   */\n  pauseAll() {\n    this._context.paused = true;\n    this._context.refreshPaused();\n    return this;\n  }\n  /**\n   * Resumes any sounds.\n   * @return Instance for chaining.\n   */\n  resumeAll() {\n    this._context.paused = false;\n    this._context.refreshPaused();\n    return this;\n  }\n  /**\n   * Toggle muted property for all sounds.\n   * @return `true` if all sounds are muted.\n   */\n  toggleMuteAll() {\n    return this._context.toggleMute();\n  }\n  /**\n   * Mutes all playing sounds.\n   * @return Instance for chaining.\n   */\n  muteAll() {\n    this._context.muted = true;\n    this._context.refresh();\n    return this;\n  }\n  /**\n   * Unmutes all playing sounds.\n   * @return Instance for chaining.\n   */\n  unmuteAll() {\n    this._context.muted = false;\n    this._context.refresh();\n    return this;\n  }\n  /**\n   * Stops and removes all sounds. They cannot be used after this.\n   * @return Instance for chaining.\n   */\n  removeAll() {\n    for (const alias in this._sounds) {\n      this._sounds[alias].destroy();\n      delete this._sounds[alias];\n    }\n    return this;\n  }\n  /**\n   * Stops all sounds.\n   * @return Instance for chaining.\n   */\n  stopAll() {\n    for (const alias in this._sounds) {\n      this._sounds[alias].stop();\n    }\n    return this;\n  }\n  /**\n   * Checks if a sound by alias exists.\n   * @param alias - Check for alias.\n   * @param assert - Whether enable console.assert.\n   * @return true if the sound exists.\n   */\n  exists(alias, assert = false) {\n    const exists = !!this._sounds[alias];\n    if (assert) {\n      console.assert(exists, `No sound matching alias '${alias}'.`);\n    }\n    return exists;\n  }\n  /**\n   * Convenience function to check to see if any sound is playing.\n   * @returns `true` if any sound is currently playing.\n   */\n  isPlaying() {\n    for (const alias in this._sounds) {\n      if (this._sounds[alias].isPlaying) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Find a sound by alias.\n   * @param alias - The sound alias reference.\n   * @return Sound object.\n   */\n  find(alias) {\n    this.exists(alias, true);\n    return this._sounds[alias];\n  }\n  /**\n   * Plays a sound.\n   * @method play\n   * @instance\n   * @param {string} alias - The sound alias reference.\n   * @param {string} sprite - The alias of the sprite to play.\n   * @return {IMediaInstance|null} The sound instance, this cannot be reused\n   *         after it is done playing. Returns `null` if the sound has not yet loaded.\n   */\n  /**\n   * Plays a sound.\n   * @param alias - The sound alias reference.\n   * @param {PlayOptions|Function} options - The options or callback when done.\n   * @return The sound instance,\n   *        this cannot be reused after it is done playing. Returns a Promise if the sound\n   *        has not yet loaded.\n   */\n  play(alias, options) {\n    return this.find(alias).play(options);\n  }\n  /**\n   * Stops a sound.\n   * @param alias - The sound alias reference.\n   * @return Sound object.\n   */\n  stop(alias) {\n    return this.find(alias).stop();\n  }\n  /**\n   * Pauses a sound.\n   * @param alias - The sound alias reference.\n   * @return Sound object.\n   */\n  pause(alias) {\n    return this.find(alias).pause();\n  }\n  /**\n   * Resumes a sound.\n   * @param alias - The sound alias reference.\n   * @return Instance for chaining.\n   */\n  resume(alias) {\n    return this.find(alias).resume();\n  }\n  /**\n   * Get or set the volume for a sound.\n   * @param alias - The sound alias reference.\n   * @param volume - Optional current volume to set.\n   * @return The current volume.\n   */\n  volume(alias, volume) {\n    const sound = this.find(alias);\n    if (volume !== void 0) {\n      sound.volume = volume;\n    }\n    return sound.volume;\n  }\n  /**\n   * Get or set the speed for a sound.\n   * @param alias - The sound alias reference.\n   * @param speed - Optional current speed to set.\n   * @return The current speed.\n   */\n  speed(alias, speed) {\n    const sound = this.find(alias);\n    if (speed !== void 0) {\n      sound.speed = speed;\n    }\n    return sound.speed;\n  }\n  /**\n   * Get the length of a sound in seconds.\n   * @param alias - The sound alias reference.\n   * @return The current duration in seconds.\n   */\n  duration(alias) {\n    return this.find(alias).duration;\n  }\n  /**\n   * Closes the sound library. This will release/destroy\n   * the AudioContext(s). Can be used safely if you want to\n   * initialize the sound library later. Use `init` method.\n   */\n  close() {\n    this.removeAll();\n    this._sounds = null;\n    if (this._webAudioContext) {\n      this._webAudioContext.destroy();\n      this._webAudioContext = null;\n    }\n    if (this._htmlAudioContext) {\n      this._htmlAudioContext.destroy();\n      this._htmlAudioContext = null;\n    }\n    this._context = null;\n    return this;\n  }\n}\n\nexport { SoundLibrary };\n//# sourceMappingURL=SoundLibrary.mjs.map\n","import { ExtensionType, LoaderParserPriority, path, extensions as extensions$1 } from 'pixi.js';\nimport { getInstance } from './instance.mjs';\nimport { Sound } from './Sound.mjs';\nimport { extensions, supported, mimes } from './utils/supported.mjs';\n\nconst getAlias = (asset) => {\n  const src = asset.src;\n  let alias = asset?.alias?.[0];\n  if (!alias || asset.src === alias) {\n    alias = path.basename(src, path.extname(src));\n  }\n  return alias;\n};\nconst soundAsset = {\n  extension: ExtensionType.Asset,\n  detection: {\n    test: async () => true,\n    add: async (formats) => [...formats, ...extensions.filter((ext) => supported[ext])],\n    remove: async (formats) => formats.filter((ext) => formats.includes(ext))\n  },\n  loader: {\n    name: \"sound\",\n    extension: {\n      type: [ExtensionType.LoadParser],\n      priority: LoaderParserPriority.High\n    },\n    /** Should we attempt to load this file? */\n    test(url) {\n      const ext = path.extname(url).slice(1);\n      return !!supported[ext] || mimes.some((mime) => url.startsWith(`data:${mime}`));\n    },\n    /** Load the sound file, this is mostly handled by Sound.from() */\n    async load(url, asset) {\n      const sound = await new Promise((resolve, reject) => Sound.from({\n        ...asset.data,\n        url,\n        preload: true,\n        loaded(err, sound2) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(sound2);\n          }\n          asset.data?.loaded?.(err, sound2);\n        }\n      }));\n      getInstance().add(getAlias(asset), sound);\n      return sound;\n    },\n    /** Remove the sound from the library */\n    async unload(_sound, asset) {\n      getInstance().remove(getAlias(asset));\n    }\n  }\n};\nextensions$1.add(soundAsset);\n\nexport { soundAsset };\n//# sourceMappingURL=soundAsset.mjs.map\n","import * as index from './filters/index.mjs';\nexport { index as filters };\nimport * as index$1 from './htmlaudio/index.mjs';\nexport { index$1 as htmlaudio };\nimport { setInstance } from './instance.mjs';\nimport { SoundLibrary } from './SoundLibrary.mjs';\nimport * as index$2 from './utils/index.mjs';\nexport { index$2 as utils };\nimport * as index$3 from './webaudio/index.mjs';\nexport { index$3 as webaudio };\nexport { Filterable } from './Filterable.mjs';\nexport { Filter } from './filters/Filter.mjs';\nexport { Sound } from './Sound.mjs';\nexport { soundAsset } from './soundAsset.mjs';\nexport { SoundSprite } from './SoundSprite.mjs';\n\nconst sound = setInstance(new SoundLibrary());\n\nexport { SoundLibrary, sound };\n//# sourceMappingURL=index.mjs.map\n","/* ***** BEGIN LICENSE BLOCK *****\n\tCopyright (c) 2023-2025 Famibee (famibee.blog38.fc2.com)\n\n\tThis software is released under the MIT License.\n\thttp://opensource.org/licenses/mit-license.php\n** ***** END LICENSE BLOCK ***** */\n\nimport {type IEvtMng, argChk_Boolean, argChk_Num} from './CmnLib';\nimport type {IVariable, IMain} from './CmnInterface';\nimport {SEARCH_PATH_ARG_EXT} from './ConfigBase';\nimport type {Config} from './Config';\nimport type {HArg} from './Grammar';\nimport {CmnTween} from './CmnTween';\nimport {disableEvent, enableEvent} from './ReadState';\n\nimport {Assets} from 'pixi.js';\nimport {sound, Sound, Options, filters} from '@pixi/sound';\nimport {Tween, remove} from '@tweenjs/tween.js'\n\nclass SndInf {\n\tstatic\t #vol_mul_talking = 1;\n\n\tstt\t\t: ISndState;\n\tloop\t: boolean \t= false;\n\n\tconstructor(\n\t\t\treadonly\tfn\t\t: string,\n\t\t\treadonly\tbuf\t\t: string,\n\t\t\treadonly\tstart_ms: number,\n\t\t\treadonly\tend_ms\t: number,\n\t\t\treadonly\tret_ms\t: number,\n\tprivate\treadonly\tvolume\t: number,\n\t\t\treadonly\tpan\t\t: number,\n\t\t\t\t\t\tsnd?\t: Sound,\n\t) {\n\t\tthis.stt = snd ?new SsPlaying :new SsLoading;\n\t\tif (snd) this.addSnd(snd);\n\t}\n\taddSnd(snd: Sound) {\n\t\tthis.loop = snd.loop;\n\t//\tif (! this.loop) sound.add(this.fn, snd);\t// 手動キャッシュすると単発連打で無音に\n\n\t\tthis.stt.onLoad(this);\n\t\tif (this.pan !== 0) snd.filters = [new filters.StereoFilter(this.pan)];\n\n\t\tthis.setVol = vol=> snd.volume = vol;\n\t\tthis.tw = ()=> new Tween(snd);\n\t\tthis.onPlayEnd = ()=> {this.stt.onPlayEnd(this.buf); this.#onStop()};\n\t\tthis.stop = ()=> {snd.stop(); this.#onStop()};\n\t\tthis.destroy = ()=> snd.destroy();\n\n\t\tswitch (this.buf) {\t\t// セリフ再生中はBGM音量を絞る\n\t\t\tcase BUF_VOICE:\n\t\t\t\tconst v = Number(val.getVal('sys:sn.sound.BGM.vol_mul_talking') ?? 1);\t\t// 歴史的経緯で ??\n\t\t\t\tif (v === 1) break;\n\n\t\t\t\tSndInf.#vol_mul_talking = v;\n\t\t\t\tconst b = hSndBuf[BUF_BGM];\n\t\t\t\tif (b) b.setVol(this.volume * SndInf.#vol_mul_talking);\n\t\t\t\tbreak;\n\n\t\t\tcase BUF_BGM:\n\t\t\t\tsnd.volume = this.volume * SndInf.#vol_mul_talking;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\t#onStop = ()=> {\n\t\t\tthis.#onStop = ()=> {};\n\t\t\tif (SndInf.#vol_mul_talking === 1 || this.buf !== BUF_VOICE) return;\n\n\t\t\t// ボリュームを戻す\n\t\t\tSndInf.#vol_mul_talking = 1;\n\t\t\tconst b = hSndBuf[BUF_BGM];\n\t\t\tif (b) b.setVol(this.volume * SndInf.#vol_mul_talking);\n\t\t}\n\n\tsetVol(_vol: number) {}\n\ttw(): Tween<Sound> | undefined {return undefined}\n\tonPlayEnd() {}\n\tstop() {}\n\tdestroy() {}\n}\n\n\nlet cfg\t: Config;\nlet val\t: IVariable;\nlet main: IMain;\nlet hSndBuf\t: HSndBuf;\n\nlet evtMng\t: IEvtMng;\n\nexport interface HSndBuf {[buf: string]: SndBuf}\nexport\tconst\tBUF_BGM\t\t= 'BGM';\nexport\tconst\tBUF_SE\t\t= 'SE';\n\t\tconst\tBUF_VOICE\t= 'VOICE';\n\n\nexport class SndBuf {\n\tstatic\t#hLP\t: {[buf: string]: string}\t= {};\n\tstatic\tinit($cfg: Config, $val: IVariable, $main: IMain, $hSndBuf: HSndBuf) {\n\t\tSndBuf.#hLP = {};\n\t\tcfg\t= $cfg;\n\t\tval\t= $val;\n\t\tmain= $main;\n\t\thSndBuf\t= $hSndBuf;\n\t}\n\tstatic\tsetEvtMng($evtMng: IEvtMng) {evtMng = $evtMng}\n\tstatic\tdelLoopPlay(buf: string): void {\n\t\tdelete SndBuf.#hLP[buf];\n\t\tconst vn = 'const.sn.sound.'+ buf +'.';\n\t\tval.setVal_Nochk('save', vn +'fn', '');\n\t\tval.setVal_Nochk('save', 'const.sn.loopPlaying', JSON.stringify(SndBuf.#hLP));\n\t\tval.flush();\n\t}\n\tstatic\tgetVol(hArg: HArg, def: number): number {\n\t\tconst vol = argChk_Num(hArg, 'volume', def);\n\t\tif (vol < 0) return 0;\n\t\tif (vol > 1) return 1;\n\t\treturn vol;\n\t}\n\tstatic\txchgbuf({buf: buf1 = BUF_SE, buf2 = BUF_SE}: HArg) {\n\t\tif (buf1 === buf2) throw `[xchgbuf] buf:${buf1} が同じ値です`;\n\n\t\tconst n1 = 'const.sn.sound.'+ buf1 +'.';\n\t\tconst v1 = Number(val.getVal('save:'+ n1 +'volume'));\n\t\tconst f1 = String(val.getVal('save:'+ n1 +'fn'));\n\t\tconst n2 = 'const.sn.sound.'+ buf2 +'.';\n\t\tconst v2 = Number(val.getVal('save:'+ n2 +'volume'));\n\t\tconst f2 = String(val.getVal('save:'+ n2 +'fn'));\n\t\tval.setVal_Nochk('save', n1 +'volume', v2);\n\t\tval.setVal_Nochk('save', n2 +'volume', v1);\n\t\tval.setVal_Nochk('save', n1 +'fn', f2);\n\t\tval.setVal_Nochk('save', n2 +'fn', f1);\n\n\t\tif (buf1 in SndBuf.#hLP !== buf2 in SndBuf.#hLP) {\t// 演算子の優先順位確認済\n\t\t\tif (buf1 in SndBuf.#hLP)\n\t\t\t\t\t{delete SndBuf.#hLP[buf1]; SndBuf.#hLP[buf2] = f1}\n\t\t\telse\t{delete SndBuf.#hLP[buf2]; SndBuf.#hLP[buf1] = f2}\n\t\t\tval.setVal_Nochk('save', 'const.sn.loopPlaying', JSON.stringify(SndBuf.#hLP));\n\t\t}\n\t\tval.flush();\n\t}\n\n\n\tstatic\treadonly\t#MAX_END_MS\t= 999000;\n\n\n\treadonly #si\t\t: SndInf;\n\treadonly needLoad;\n\n\n\tconstructor(\n\t\treadonly hArg\t: HArg,\n\t\treadonly buf\t: string,\n\t\treadonly fn\t\t: string,\n\t) {\n\t\tconst start_ms = argChk_Num(hArg, 'start_ms', 0);\n\t\tconst end_ms = argChk_Num(hArg, 'end_ms', SndBuf.#MAX_END_MS);\n\t\tconst ret_ms = argChk_Num(hArg, 'ret_ms', 0);\n\t\tconst pan = argChk_Num(hArg, 'pan', 0);\n\t\tconst speed = argChk_Num(hArg, 'speed', 1);\n\n\t\tif (start_ms < 0) throw `[playse] start_ms:${start_ms} が負の値です`;\n\t\tif (ret_ms < 0) throw `[playse] ret_ms:${ret_ms} が負の値です`;\n\t\tif (0 < end_ms) {\n\t\t\tif (end_ms <= start_ms) throw `[playse] start_ms:${start_ms} >= end_ms:${end_ms} は異常値です`;\n\t\t\tif (end_ms <= ret_ms) throw `[playse] ret_ms:${ret_ms} >= end_ms:${end_ms} は異常値です`;\n\t\t}\n\n\t\t// この辺で属性を増減したら、loadFromSaveObj()にも反映する\n\t\tconst vn = 'const.sn.sound.'+ buf +'.';\n\t\tval.setVal_Nochk('save', vn +'fn', fn);\n\t\tconst savevol = SndBuf.getVol(hArg, 1);\n\t\tval.setVal_Nochk('save', vn +'volume', savevol);// 目標音量（save:）\n\t\tconst volume = savevol * Number(val.getVal('sys:'+ vn +'volume', 1));\n\n\t\tconst loop = argChk_Boolean(hArg, 'loop', false);\n\t\tif (loop) {\n\t\t\tSndBuf.#hLP[buf] = fn;\n\t\t\tval.setVal_Nochk('save', 'const.sn.loopPlaying', JSON.stringify(SndBuf.#hLP));\n\t\t}\n\t\telse SndBuf.delLoopPlay(buf);\n\t\tval.setVal_Nochk('save', vn +'start_ms', start_ms);\n\t\tval.setVal_Nochk('save', vn +'end_ms', end_ms);\n\t\tval.setVal_Nochk('save', vn +'ret_ms', ret_ms);\n\t\tval.setVal_Nochk('tmp', vn +'playing', true);\n\t\tval.flush();\n\n\t\tconst snd = sound.exists(fn) ?sound.find(fn) :undefined;\t// キャッシュにあるか\n\t\tthis.#si = new SndInf(\n\t\t\tfn,\n\t\t\tbuf,\n\t\t\tstart_ms,\n\t\t\tend_ms,\n\t\t\tret_ms,\n\t\t\tvolume,\n\t\t\tpan,\n\t\t\tsnd,\n\t\t);\n\t\t// @pixi/sound用基本パラメータ\n\t\tconst o: Options = {\n\t\t\tloop,\n\t\t\tspeed,\n\t\t\tvolume,\n\t\t\tloaded\t: (e, s2)=> {\n\t\t\t\tif (this.#si.stt.isDestroy) return;\n\t\t\t\tif (e) {main.errScript(`ロード失敗です SndBuf fn:${fn} ${e}`, false); return}\n\t\t\t\tif (! s2) return;\n\n\t\t\t\tthis.#si.addSnd(s2);\n\t\t\t\tif (pan !== 0) s2.filters = [new filters.StereoFilter(pan)];\n\t\t\t//\tif (! o.loop) sound.add(fn, snd);\t// 手動キャッシュすると単発連打で無音に\n\t\t\t\thArg.fnc?.();\n\t\t\t},\n\t\t};\n\n\t\t// start_ms・end_ms機能→@pixi/sound準備\n\t\tlet sp_nm = '';\n\t\tif (0 < start_ms || end_ms < SndBuf.#MAX_END_MS) {\n\t\t\tsp_nm = `${fn};${start_ms};${end_ms};${ret_ms}`;\n\t\t\tconst os = (o.sprites ??= {})[sp_nm] = {\n\t\t\t\tstart\t: start_ms /1000,\n\t\t\t\tend\t\t: end_ms /1000,\n\t\t\t};\n\t\t\to.preload = true;\t\t// loaded発生用、トラブルの元なので使用を控えたい\n\t\t\tconst old = o.loaded!;\n\t\t\to.loaded = (e, s0)=> {\n\t\t\t\tif (this.#si.stt.isDestroy) return;\n\n\t\t\t\told(e, s0);\n\t\t\t\tconst s2 = s0!;\n\t\t\t\tconst d = s2.duration;\n\t\t\t\tif (os.end < 0) {\t// 負の値は末尾から\n\t\t\t\t\tos.end += d;\n\t\t\t\t\ts2.removeSprites(sp_nm);\n\t\t\t\t\ts2.addSprites(sp_nm, os);\n\t\t\t\t}\n\t\t\t\tif (os.end <= os.start) main.errScript(`[playse] end_ms:${end_ms}(${os.end *1000}) >= start_ms:${start_ms} は異常値です`);\n\t\t\t\tif (os.end *1000 <= ret_ms) main.errScript(`[playse] end_ms:${end_ms}(${os.end *1000}) <= ret_ms:${ret_ms} は異常値です`);\n\t\t\t\tif (d <= os.start) main.errScript(`[playse] 音声ファイル再生時間:${d *1000} <= start_ms:${start_ms} は異常値です`);\n\t\t\t\tif (end_ms !== SndBuf.#MAX_END_MS && d <= os.end) main.errScript(`[playse] 音声ファイル再生時間:${d *1000} <= end_ms:${end_ms} は異常値です`);\n\n\t\t\t\ts2.play(sp_nm, snd=> o.complete?.(snd));\n\t\t\t\t\t// 流れ的にはすぐ下の「ループなし/あり」を呼ぶ\n\t\t\t};\n\t\t}\n\t\telse o.autoPlay = true;\n\n\t\t// ループなし ... 再生完了イベント\n\t\tif (! loop) o.complete = ()=> {\n\t\t\tstop2var(this.#si, buf);\n\t\t\tthis.#si.onPlayEnd();\n\t\t};\n\t\t// ループあり ... ret_ms処理\n\t\telse if (ret_ms !== 0) {\n\t\t\to.loop = false;\t// 一周目はループなしとする\n\t\t\to.complete = async snd=> {\n\t\t\t\tconst d = snd.duration;\n\t\t\t\tconst start\t= ret_ms /1000;\n\t\t\t\tconst end\t= end_ms /1000;\n\t\t\t\tif (d <= start) main.errScript(`[playse] 音声ファイル再生時間:${d *1000} <=  ret_ms:${ret_ms} は異常値です`);\n\n\t\t\t\tawait snd.play({\t// 一周目はループなし、なのでキャッシュされてる\n\t\t\t\t\t...o,\n\t\t\t\t\tstart,\n\t\t\t\t\tend\t\t: (end < 0) ?end +d :end,// 負の値は末尾から\n\t\t\t\t//\tspeed,\t\t// 重複\n\t\t\t\t\tloop\t: true,\n\t\t\t\t//\tvolume,\t\t// 重複\n\t\t\t\t//-\tmuted?: boolean;\n\t\t\t\t\tfilters\t: pan !== 0 ?[new filters.StereoFilter(pan)] :[],\n\t\t\t\t//-\tcomplete?: CompleteCallback;\n\t\t\t\t//-\tloaded?: LoadedCallback;\n\t\t\t\t//-\tsingleInstance?: boolean;\n\t\t\t\t});\n\t\t\t\t//不要 this.#sb.snd = snd;\t// this.#sb.snd === snd (true)\n\t\t\t};\n\t\t}\n\n\t\tthis.#initVol();\n\t\tif (snd) {\n\t\t\tsnd.volume = volume;\t// 再生のたびに音量を戻す\n\t\t\tif (sp_nm) this.#playseSub(fn, o);\n\t\t\telse if (snd.isPlayable) {\n\t\t\t\tconst ab = snd.options.source;\n\t\t\t\tif (! (ab instanceof ArrayBuffer)\n\t\t\t\t\t|| ab.byteLength === 0) snd.play(o);\n\t\t\t\telse this.#si.addSnd(Sound.from({\n\t\t\t\t\t...o,\n\t\t\t\t\turl\t\t: snd.options.url,\n\t\t\t\t\tsource\t: ab,\n\t\t\t\t}));\n\t\t\t\tif (pan !== 0) snd.filters = [new filters.StereoFilter(pan)];\n\t\t\t}\n\t\t\tthis.needLoad = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst join = this.needLoad = argChk_Boolean(hArg, 'join', true);\n\t\tif (join) {\n\t\t\tdisableEvent();\n\t\t\tconst old = o.loaded!;\n\t\t\to.loaded = (e, s2)=> {\n\t\t\t\tif (! this.#si.stt.isDestroy) old(e, s2);\n\t\t\t\tenableEvent();\n\t\t\t};\n\t\t}\n\t\tthis.#playseSub(fn, o);\n\t}\n\t#initVol = ()=> {\n\t\tsound.volumeAll = Number(val.getVal('sys:sn.sound.global_volume', 1));\n\t\tthis.#initVol = ()=> {};\n\t};\n\t#playseSub(fn: string, o: Options) {\n\t\tconst src = cfg.searchPath(fn, SEARCH_PATH_ARG_EXT.SOUND);\n\t\tif (! src.endsWith('.bin')) {o.url = src; Sound.from(o); return}\n\n\t\tconst fnc = (ab: ArrayBuffer)=> {\n\t\t\to.source = structuredClone(ab);\t// ディープコピー必須\n\t\t\tSound.from(o);\n\t\t};\n\n\t\tconst alias = ':snd:'+ fn;\n\t\tif (Assets.cache.has(alias)) fnc(Assets.get(alias));\n\t\t\t// hasを噛まさないと暗号化時にどうしても警告が出る\n\t\telse Assets.load({alias, src}).then(fnc);\n\t}\n\n\n\tsetVol(vol: number) {this.#si.setVol(vol)}\n\n\tws =(hArg: HArg)=> this.#si.stt.ws(this.#si, hArg);\n\tstopse({buf = BUF_SE}: HArg) {\n\t\tstop2var(this.#si, buf);\n\t\tthis.#si.stt.stopse(this.#si);\n\t}\n\n\tfade =(hArg: HArg)=> this.#si.stt.fade(this.#si, hArg);\n\twf =(hArg: HArg)=> this.#si.stt.wf(this.#si, hArg);\n\tstopfadese =(hArg: HArg)=> this.#si.stt.stopfadese(this.#si, hArg);\n\n}\n\n\n// =================================================\nfunction stop2var({loop}: SndInf, buf: string) {\n\tif (loop) {SndBuf.delLoopPlay(buf); return}\n\n\tconst vn = 'const.sn.sound.'+ buf +'.';\n\tval.setVal_Nochk('tmp', vn +'playing', false);\n\tval.flush();\n}\n\n\nfunction stopfadese(tw: Tween<Sound>) {tw.stop().end()}\t// stop()とend()は別\n\n// =================================================\n\n\ninterface ISndState {\n\tonLoad(si: SndInf)\t: void;\n\tstopse(si: SndInf)\t: void;\n\tws(si: SndInf, hArg: HArg): boolean;\n\tonPlayEnd(buf: string)\t: void;\n\tfade(si: SndInf, hArg: HArg): void;\n\twf(si: SndInf, hArg: HArg): boolean;\n\tcompFade(buf: string)\t: void;\n\tstopfadese(si: SndInf, hArg: HArg): void;\n\tisDestroy\t: boolean;\n}\n\nclass SsLoading implements ISndState {\n\tonLoad(si: SndInf)\t{si.stt = new SsPlaying}\n\tstopse(si: SndInf)\t{si.stt = new SsStop(si, false)}\n\tws =()=> false;\n\tonPlayEnd() {}\t\t// ok\n\tfade() {}\t\t\t// ok\n\twf =()=> false;\t\t// ok\n\tcompFade() {}\t\t// ok\n\tstopfadese() {}\t\t// ok\n\treadonly\tisDestroy\t= false;\n}\n\nclass SsPlaying implements ISndState {\n\tonLoad() {}\t\t\t// ok\n\tstopse(si: SndInf)\t{si.stt = new SsStop(si)}\n\tws(si: SndInf, hArg: HArg) {\n\t\tif (si.loop) return false;\n\n\t\tconst {buf = BUF_SE} = hArg;\n\t\tconst stop = argChk_Boolean(hArg, 'stop', true);\n\t\targChk_Boolean(hArg, 'canskip', false);\t// waitEvent() のデフォルトと違うので先行上書き\n\t\tif (evtMng.waitEvent('buf:'+ buf, hArg, ()=> {\t// 順番固定\n\t\t\tstop2var(si, buf);\n\t\t\tsi.onPlayEnd();\t// まず一回やる\n\t\t\tif (stop) si.stt.stopse(si); else si.stt.onPlayEnd = ()=> {};\n\t\t\t\t// else後は SsWaitingStop か SsStop の想定\n\t\t})) {\n\t\t\tsi.stt = new SsWaitingStop;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\tonPlayEnd() {}\t\t// ok\n\tfade(si: SndInf, hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\n\t\tconst vn = 'const.sn.sound.'+ buf +'.';\n\t\tconst bnV = vn +'volume';\n\t\tconst savevol = SndBuf.getVol(hArg, NaN);\n\t\tval.setVal_Nochk('save', bnV, savevol);\t// 目標音量（save:）\n\t\tconst vol = savevol * Number(val.getVal('sys:'+ bnV, 1))\n\t\tconst stop = argChk_Boolean(hArg, 'stop', (savevol === 0));\n\t\t\t// this.getVol() により savevol = hArg.volume\n\t\tif (stop) SndBuf.delLoopPlay(buf);\t// fade中reloadなど、できるだけ早く情報更新か\n\t\tval.flush();\n\n\t\tconst time = argChk_Num(hArg, 'time', NaN);\n\t\tconst delay = argChk_Num(hArg, 'delay', 0);\n\t\tif ((time === 0 && delay === 0) || evtMng.isSkipping) {\n\t\t\tsi.setVol(vol);\n\t\t\tsi.stt = stop ? new SsStop(si) : new SsPlaying;\n\t\t\treturn;\n\t\t}\n\n//console.log('fadese start from:%f to:%f', sb.snd.volume, vol);\n\t\tconst tw = si.tw();\n\t\tif (! tw) return;\n\t\tCmnTween.setTwProp(tw, hArg)\n\t\t.to({volume: vol}, time)\n\t\t.onComplete(()=> {\n\t\t\tremove(tw);\n\t\t\tsi.stt.compFade(buf);\n\t\t\tsi.stt = stop ? new SsStop(si) : new SsPlaying;\n\t\t})\n\t\t.start();\n\n\t\tsi.stt = new SsFade(tw);\n\t}\n\twf =()=> false;\t\t// ok\n\tcompFade() {}\t\t// ok\n\tstopfadese() {}\t\t// ok\n\treadonly\tisDestroy\t= false;\n}\n\nclass SsWaitingStop implements ISndState {\n\tonLoad() {}\t\t\t// ok\n\tstopse(si: SndInf)\t{si.stt = new SsStop(si)}\n\tws =()=> false;\t\t// ok\n\tonPlayEnd(buf: string)\t{evtMng.breakEvent('buf:'+ buf)}\n\tfade() {}\t\t\t// ok\n\twf =()=> false;\t\t// ok\n\tcompFade() {}\t\t// ok\n\tstopfadese() {}\t\t// ok\n\treadonly\tisDestroy\t= false;\n}\n\nclass SsFade implements ISndState {\n\tconstructor(readonly tw: Tween<Sound>) {}\n\tonLoad() {}\t\t\t// ok\n\tstopse(si: SndInf)\t{stopfadese(this.tw); si.stt = new SsStop(si)}\t// 順番厳守\n\tws =()=> false;\t\t// ok ?\n\tonPlayEnd() {}\t\t// ok\n\tfade() {}\t\t\t// ok\n\twf(si: SndInf, hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\targChk_Boolean(hArg, 'canskip', false);\t// waitEvent() のデフォルトと違うので先行上書き\n\t\tif (evtMng.waitEvent('buf:'+ buf, hArg, ()=> stopfadese(this.tw))) {\n\t\t\tsi.stt = new SsWaitingFade(this.tw);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\tcompFade() {}\t\t// ok\n\tstopfadese =()=> stopfadese(this.tw);\n\treadonly\tisDestroy\t= false;\n}\n\nclass SsWaitingFade implements ISndState {\n\tconstructor(readonly tw: Tween<Sound>) {}\n\tonLoad() {}\t\t\t// ok\n\tstopse(si: SndInf)\t{stopfadese(this.tw); si.stt = new SsStop(si)}\n\tws =()=> false;\t\t// ok\n\tonPlayEnd() {}\t\t// ok\n\tfade() {}\t\t\t// ok\n\twf =()=> false;\t\t// ok\n\tcompFade(buf: string) {evtMng.breakEvent('buf:'+ buf)}\n\tstopfadese =()=> stopfadese(this.tw);\n\treadonly\tisDestroy\t= false;\n}\n\nclass SsStop implements ISndState {\n\tconstructor(readonly si: SndInf, readonly stop = true) {\n\t\tif (! stop) return;\n\n\t\tsi.stop();\n\t\tif (! si.loop) return;\t// destroy がないと再生が残るケースが。効果音だと破棄が激しいのでループモノ(BGM)だけにする\n\n\t\tsi.destroy();\n\t\tsi.destroy = ()=> {};\t// 再度コール時エラー対策\n\t}\n\tonLoad() {}\t\t\t// ok\n\tstopse() {}\t\t\t// ok\n\tws =()=> false;\t\t// ok\n\tonPlayEnd() {}\t\t// ok\n\tfade() {}\t\t\t// ok\n\twf =()=> false;\t\t// ok\n\tcompFade() {}\t\t// ok\n\tstopfadese() {}\t\t// ok\n\treadonly\tisDestroy\t= true;\n}\n","/* ***** BEGIN LICENSE BLOCK *****\n\tCopyright (c) 2018-2025 Famibee (famibee.blog38.fc2.com)\n\n\tThis software is released under the MIT License.\n\thttp://opensource.org/licenses/mit-license.php\n** ***** END LICENSE BLOCK ***** */\n\nimport {type IEvtMng, argChk_Boolean, argChk_Num} from './CmnLib';\nimport type {IHTag, HArg} from './Grammar';\nimport type {IVariable, IMain, INoticeChgVolume} from './CmnInterface';\nimport type {Config} from './Config';\nimport {BUF_BGM, BUF_SE, type HSndBuf, SndBuf} from './SndBuf';\n\nimport {sound, utils} from '@pixi/sound';\n\n\nexport class SoundMng {\n\t#hSndBuf\t: HSndBuf\t= {};\n\n\tconstructor(cfg: Config, hTag: IHTag, private readonly val: IVariable, main: IMain) {\n\t\thTag.volume\t\t= o=> this.#volume(o);\t\t// 音量設定（独自拡張）\n\t\thTag.fadebgm\t= o=> this.#fadebgm(o);\t\t// BGMのフェード\n\t\thTag.fadeoutbgm\t= o=> this.#fadeoutbgm(o);\t// BGMのフェードアウト\n\t\thTag.fadeoutse\t= o=> this.#fadeoutse(o);\t// 効果音のフェードアウト\n\t\thTag.fadese\t\t= o=> this.#fadese(o);\t\t// 効果音のフェード\n\t\thTag.playbgm\t= o=> this.#playbgm(o);\t\t// BGM の演奏\n\t\thTag.playse\t\t= o=> this.#playse(o);\t\t// 効果音の再生\n\t\thTag.stop_allse\t= ()=> this.#stop_allse();\t// 全効果音再生の停止\n\t\thTag.stopbgm\t= o=> this.#stopbgm(o);\t\t// BGM 演奏の停止\n\t\thTag.stopse\t\t= o=> this.#stopse(o);\t\t// 効果音再生の停止\n\t\thTag.wb\t\t\t= o=> this.#wb(o);\t\t\t// BGM フェードの終了待ち\n\t\thTag.wf\t\t\t= o=> this.#wf(o);\t\t\t// 効果音フェードの終了待ち\n\t\thTag.stopfadese\t= o=> this.#stopfadese(o);\t// 音声フェードの停止\n\t\thTag.wl\t\t\t= o=> this.#wl(o);\t\t\t// BGM 再生の終了待ち\n\t\thTag.ws\t\t\t= o=> this.#ws(o);\t\t\t// 効果音再生の終了待ち\n\t\thTag.xchgbuf\t= o=> this.#xchgbuf(o);\t\t// 再生トラックの交換\n\n\t\tval.setVal_Nochk('save', 'const.sn.loopPlaying', '{}');\n\n\t\tval.setVal_Nochk('tmp', 'const.sn.sound.codecs', JSON.stringify(utils.supported));\n\n\t\tSndBuf.init(cfg, val, main, this.#hSndBuf);\n\t\tsound.disableAutoPause = true;\n\t}\n\n\t#evtMng\t: IEvtMng;\n\tsetEvtMng(evtMng: IEvtMng) {this.#evtMng = evtMng; SndBuf.setEvtMng(evtMng)}\n\tsetNoticeChgVolume(setGlbVol: INoticeChgVolume, setMovVol: INoticeChgVolume) {\n\t\tthis.val.defValTrg('sys:sn.sound.global_volume', (_name: string, val: any)=> setGlbVol(sound.volumeAll = Number(val)));\n\t\tthis.val.defValTrg('sys:sn.sound.movie_volume', (_name: string, val: any)=> setMovVol(Number(val)));\n\n\t\t// 起動時初期値セット\n\t\tthis.val.setVal_Nochk('sys', 'sn.sound.global_volume', this.val.getVal('sys:sn.sound.global_volume', 1));\n\t\tthis.val.setVal_Nochk('sys', 'sn.sound.movie_volume', this.val.getVal('sys:sn.sound.movie_volume', 1));\n\t}\n\n\t//MARK: 音量設定（独自拡張）\n\t#volume(hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\tconst vnV = 'const.sn.sound.'+ buf +'.volume';\n\t\tconst arg_vol = this.#getVol(hArg, 1);\n\t\tif (Number(this.val.getVal('sys:'+ vnV)) === arg_vol) return false;\n\n\t\tthis.val.setVal_Nochk('sys', vnV, arg_vol)\t// 基準音量（sys:）\n\t\tthis.val.flush();\t// fadese()内で必ずしも呼ばれないので\n\n\t\t// 再生中音声の一時的音量も変更\n\t\thArg.time = 0;\n\t\thArg.volume = Number(this.val.getVal('save:'+ vnV));\t// 目標音量（save:）\n\t\treturn this.#fadese(hArg);\n\t}\n\t#getVol(hArg: HArg, def: number) {\n\t\tconst vol = argChk_Num(hArg, 'volume', def);\n\t\tif (vol < 0) return 0;\n\t\tif (vol > 1) return 1;\n\t\treturn vol;\n\t}\n\n\t//MARK: BGM/効果音のフェードアウト（loadから使うのでマクロ化禁止）\n\t#fadeoutbgm(hArg: HArg) {hArg.volume = 0; return this.#fadebgm(hArg)}\n\t//MARK: 効果音のフェードアウト（loadから使うのでマクロ化禁止）\n\t#fadeoutse(hArg: HArg) {hArg.volume = 0; return this.#fadese(hArg)}\n\t//MARK: BGMのフェード（loadから使うのでマクロ化禁止）\n\t#fadebgm(hArg: HArg) {hArg.buf = BUF_BGM; return this.#fadese(hArg)}\n\t//MARK: 効果音のフェード\n\t#fadese(hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\tthis.#stopfadese(hArg);\n\t\tthis.#hSndBuf[buf]?.fade(hArg);\n\n\t\treturn false;\n\t}\n\n\t//MARK: BGM の演奏\n\t#playbgm(hArg: HArg) {\n\t\thArg.buf = BUF_BGM;\n\t\thArg.canskip = false;\n\t\targChk_Boolean(hArg, 'loop', true);\n\t\treturn this.#playse(hArg);\n\t}\n\n\t//MARK: 効果音の再生\n\t#playse(hArg: HArg) {\n\t\tconst {buf = BUF_SE, fn} = hArg;\n\t\tthis.#stopse({buf});\n\t\tif (! fn) throw `fnは必須です buf:${buf}`;\n\n\t\t// キャッシュ削除\n\t\t// const sb0 = this.#hSndBuf[buf];\n\t\t// const alias = ':snd:'+ fn;\n\t\t// if (sb0 && sb0.fn !== fn && ! this.val.getVal('tmp:const.sn.isPaging') && Assets.cache.has(alias)) Assets.unload(alias);\n\n\t\t// isSkipKeyDown()は此処のみとする。タイミングによって変わる\n\t\tif (argChk_Boolean(hArg, 'canskip', true) && this.#evtMng.isSkipping) return false;\n\n\t\tconst sb = this.#hSndBuf[buf] = new SndBuf(hArg, buf, fn);\n\t\treturn sb.needLoad;\n\t}\n\n\tclearCache() {sound.removeAll()}\n\n\t//MARK: 全効果音再生の停止\n\t#stop_allse() {\n\t\tfor (const buf of Object.keys(this.#hSndBuf)) this.#stopse({buf});\n\t\tthis.#hSndBuf = {};\n\n\t\tsound.stopAll();\t// 念のため\n\n\t\treturn false;\n\t}\n\t//MARK: BGM 演奏の停止（loadから使うのでマクロ化禁止）\n\t#stopbgm(hArg: HArg) {hArg.buf = BUF_BGM; return this.#stopse(hArg)}\n\t//MARK: 効果音再生の停止\n\t#stopse(hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\tthis.#hSndBuf[buf]?.stopse(hArg);\n\n\t\treturn false;\n\t}\n\n\t//MARK: BGM フェードの終了待ち\n\t#wb(hArg: HArg) {hArg.buf = BUF_BGM; return this.#wf(hArg)}\n\n\t//MARK: 効果音フェードの終了待ち\n\t#wf(hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\treturn this.#hSndBuf[buf]?.wf(hArg) as boolean;\n\t}\n\n\t//MARK: 音声フェードの停止\n\t#stopfadese(hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\tthis.#hSndBuf[buf]?.stopfadese(hArg);\n\n\t\treturn false;\n\t}\n\n\t//MARK: BGM 再生の終了待ち\n\t#wl(hArg: HArg) {hArg.buf = BUF_BGM; return this.#ws(hArg)}\n\t//MARK: 効果音再生の終了待ち\n\t#ws(hArg: HArg) {\n\t\tconst {buf = BUF_SE} = hArg;\n\t\treturn this.#hSndBuf[buf]?.ws(hArg) as boolean;\n\t}\n\n\t//MARK: 再生トラックの交換\n\t#xchgbuf(hArg: HArg) {\n\t\tconst {buf: buf1 = BUF_SE, buf2 = BUF_SE} = hArg;\n\t\tif (buf1 === buf2) return false;\n\n\t\tconst a = this.#hSndBuf[buf1];\t// 分割代入の変数交換だと noUncheckedIndexedAccess エラーになるので\n\t\tconst b = this.#hSndBuf[buf2];\n\t\tif (a) this.#hSndBuf[buf2] = a; else delete this.#hSndBuf[buf2];\n\t\tif (b) this.#hSndBuf[buf1] = b; else delete this.#hSndBuf[buf1];\n\n\t\tSndBuf.xchgbuf(hArg);\n\n\t\treturn false;\n\t}\n\n\t//MARK: しおりの読込（BGM状態復元）\n\tplayLoopFromSaveObj(all_stop_and_play: boolean): Promise<void>[] {\n\t\tconst lp = String(this.val.getVal('save:const.sn.loopPlaying', '{}'));\n\t\tif (lp === '{}') {this.#stop_allse(); this.clearCache(); return []}\n/*\n\t\t\t\t\t(Now)#hSndBuf\n\t\t\t\t\tstop\tplay\n\thSaveLP\tstop\t-\t\tstop\t\t--[1]\n\t(to)\tplay\tplay\tstop/play\t--[2]\n\t\t\teq play\tplay\t-\t\t\t--[2]\n*/\n\t\tconst hSaveLP: {[buf: string]: string} = JSON.parse(lp);\n\t\tif (all_stop_and_play) {this.#stop_allse(); this.clearCache()}\n\t\telse for (const [buf, sb] of Object.entries(this.#hSndBuf)) {\n\t\t\t// [1] #hSndBuf（再生中）だが hSaveLP（再生予定） にない buf -> stop\n\t\t\tif (! (buf in hSaveLP)) sb?.stopse({buf});\n\t\t}\n\n\t\t// [2] hSaveLP（再生予定）を再生。だが#hSndBuf（再生中）の状況で処理変更\n\t\treturn Object.entries(hSaveLP).map(([buf, fn])=> new Promise(re=> {\n\t\t\tconst sb = this.#hSndBuf[buf]\n\t\t\tif (! all_stop_and_play && sb) {\n\t\t\t\tif (sb.fn === fn) {re(); return}\n\t\t\t\t//sb.stopse({buf});\t// 再生中 fn !== 再生予定 fn なら stop\n\t\t\t\t\t// #playbgm()、#playse() 内で stop するので省略\n\t\t\t}\n\n\t\t\tconst vm = 'save:const.sn.sound.'+ buf +'.';\n\t\t\tconst hArg = {\n\t\t\t\tfn,\n\t\t\t\tbuf,\n\t\t\t\tjoin\t: false,\n\t\t\t\tloop\t: true,\n\t\t\t\tvolume\t: Number(this.val.getVal(vm +'volume')),\n\t\t\t\tstart_ms: Number(this.val.getVal(vm +'start_ms')),\n\t\t\t\tend_ms\t: Number(this.val.getVal(vm +'end_ms')),\n\t\t\t\tret_ms\t: Number(this.val.getVal(vm +'ret_ms')),\n\t\t\t\tfnc\t\t: re,\t// loaded\n\t\t\t};\n\t\t\tif (hArg.buf === BUF_BGM) this.#playbgm(hArg);\n\t\t\telse this.#playse(hArg);\n\t\t}));\n\t}\n\n\tdestroy() {this.#stop_allse(); this.clearCache()}\n\n}\n"],"names":["instance","setInstance","sound","getInstance","Filter","destination","source","WebAudioUtils","param","value","context","_EqualizerFilter","f32","f64","f125","f250","f500","f1k","f2k","f4k","f8k","f16k","bands","equalizerBands","band","node","i","frequency","gain","EqualizerFilter","StereoFilter","pan","stereo","panner","audioContext","HTMLAudioContext","EventEmitter","_filters","id","_HTMLAudioInstance","parent","name","currentTime","paused","media","speed","volume","loop","muted","global","globalVolume","soundVolume","instanceVolume","pausedReal","options","start","end","Ticker","HTMLAudioInstance","HTMLAudioMedia","callback","onLoad","removeListeners","onAbort","onError","message","SoundSprite","complete","extensions","mimes","supported","validateFormats","typeOverrides","overrides","audio","formats","no","ext","canByExt","canByType","WebAudioInstance","filters","filter","duration","enabled","force","now","delta","progress","soundLength","err","Filterable","input","output","prevFilter","_WebAudioNodes","bufferSource","analyser","orig","WebAudioNodes","WebAudioMedia","buffer","url","response","DOMAdapter","arrayBuffer","audioBufferReadyFn","_Sound","urls","file","path","a","b","data","results","alias","sprite","resolve","reject","resolve2","len","index","Sound","WebAudioContext","win","ctx","compressor","state","handleError","result","SoundLibrary","filtersAll","sourceOptions","options2","legacy","autoPause","assert","exists","getAlias","asset","src","soundAsset","ExtensionType","LoaderParserPriority","mime","sound2","_sound","extensions$1","SndInf","fn","buf","start_ms","end_ms","ret_ms","snd","SsPlaying","SsLoading","#vol_mul_talking","filters.StereoFilter","vol","Tween","#onStop","BUF_VOICE","v","val","hSndBuf","BUF_BGM","_vol","cfg","main","evtMng","BUF_SE","SndBuf","hArg","argChk_Num","#MAX_END_MS","vn","savevol","argChk_Boolean","#hLP","#si","o","e","s2","sp_nm","os","old","s0","d","stop2var","#initVol","#playseSub","ab","disableEvent","enableEvent","$cfg","$val","$main","$hSndBuf","$evtMng","def","buf1","buf2","n1","v1","f1","n2","v2","f2","SEARCH_PATH_ARG_EXT","fnc","Assets","stopfadese","tw","si","SsStop","stop","SsWaitingStop","bnV","time","delay","CmnTween","remove","SsFade","SsWaitingFade","SoundMng","hTag","#volume","#fadebgm","#fadeoutbgm","#fadeoutse","#fadese","#playbgm","#playse","#stop_allse","#stopbgm","#stopse","#wb","#wf","#stopfadese","#wl","#ws","#xchgbuf","utils.supported","#hSndBuf","#evtMng","setGlbVol","setMovVol","_name","vnV","arg_vol","#getVol","all_stop_and_play","lp","hSaveLP","sb","re","vm"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}