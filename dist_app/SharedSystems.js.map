{"version":3,"file":"SharedSystems.js","sources":["../node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","../node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","../node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","../node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","../node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","../node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs","../node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","../node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","../node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","../node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","../node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","../node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","../node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","../node_modules/pixi.js/lib/scene/container/utils/clearList.mjs","../node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","../node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","../node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","../node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/SchedulerSystem.mjs","../node_modules/pixi.js/lib/utils/sayHello.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","../node_modules/pixi.js/lib/utils/data/clean.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","../node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs"],"sourcesContent":["var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\nuniform float uInverse;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha;\\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    float a = alphaMul * masky.r * npmAlpha * clip;\\n\\n    if (uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    finalColor = original * a;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,\\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n  uInverse:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n};\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);\\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n  return gfu.uGlobalFrame.zw;\\n}\\n\\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>,\\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n    var uAlpha = filterUniforms.uAlpha;\\n\\n    var clip = step(3.5,\\n      step(maskClamp.x, filterUv.x) +\\n      step(maskClamp.y, filterUv.y) +\\n      step(filterUv.x, maskClamp.z) +\\n      step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    var alphaMul = 1.0 - uAlpha * (1.0 - mask.a);\\n\\n    var a: f32 = alphaMul * mask.r * uAlpha * clip;\\n\\n    if (filterUniforms.uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    return source * a;\\n}\\n\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" },\n      uInverse: { value: options.inverse ? 1 : 0, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  set inverse(value) {\n    this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n  }\n  get inverse() {\n    return this.resources.filterUniforms.uniforms.uInverse === 1;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","import { ExtensionType, extensions } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { DefaultBatcher } from './DefaultBatcher.mjs';\n\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */ Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */ Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher());\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */ Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\nextensions.add(DefaultBatcher);\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","\"use strict\";\nfunction buildInstructions(renderGroup, rendererOrPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  const renderPipes = renderer.renderPipes;\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererOrPipes) {\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, renderer);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderer) {\n  if (container.renderPipeId) {\n    const renderable = container;\n    const { renderPipes, renderableGC } = renderer;\n    renderPipes.blendMode.setBlendMode(renderable, container.groupBlendMode, instructionSet);\n    const rp = renderPipes;\n    rp[renderable.renderPipeId].addRenderable(renderable, instructionSet);\n    renderableGC.addRenderable(renderable);\n    renderable.didViewUpdate = false;\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderer);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderer, isRoot) {\n  const { renderPipes, renderableGC } = renderer;\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderable = container;\n    const renderPipeId = renderable.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(renderable, renderable.groupBlendMode, instructionSet);\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(renderable, instructionSet);\n      renderableGC.addRenderable(renderable);\n      renderable.didViewUpdate = false;\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderer);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\nexport { buildInstructions, collectAllRenderables };\n//# sourceMappingURL=buildInstructions.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../renderers/types.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY),\n      inverse: false,\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n  get inverse() {\n    return this.filters[0].inverse;\n  }\n  set inverse(value) {\n    this.filters[0].inverse = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false,\n      maskedContainer\n    });\n    mask.inverse = maskedContainer._maskOptions.inverse;\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      inverse: _maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      filterEffect.inverse = instruction.inverse;\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"not-equal\",\n    passOp: \"replace\"\n  },\n  stencilBack: {\n    compare: \"not-equal\",\n    passOp: \"replace\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    let dataInt32 = null;\n    if (!data) {\n      data = uniformGroup.buffer.data;\n      dataInt32 = uniformGroup.buffer.dataInt32;\n    }\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"dataInt32\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        dataInt32[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"vec2<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n  \"vec3<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n  \"vec4<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuRenderTargetHash\");\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    this.adaptor.prerender?.(this.rootRenderTarget);\n  }\n  postrender() {\n    this.adaptor.postrender?.(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  updateRenderable() {\n  }\n  destroyRenderable() {\n  }\n  validateRenderable() {\n    return false;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    if (renderGroup.isCachedAsTexture) {\n      this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n    } else {\n      this._addRenderableDirect(renderGroup, instructionSet);\n    }\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    if (renderGroup.isCachedAsTexture) {\n      this._executeCacheAsTexture(renderGroup);\n    } else {\n      this._executeDirect(renderGroup);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _addRenderableDirect(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    if (renderGroup._batchableRenderGroup) {\n      BigPool.return(renderGroup._batchableRenderGroup);\n      renderGroup._batchableRenderGroup = null;\n    }\n    instructionSet.add(renderGroup);\n  }\n  _addRenderableCacheAsTexture(renderGroup, instructionSet) {\n    const batchableRenderGroup = renderGroup._batchableRenderGroup ?? (renderGroup._batchableRenderGroup = BigPool.get(BatchableSprite));\n    batchableRenderGroup.renderable = renderGroup.root;\n    batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n    batchableRenderGroup.texture = renderGroup.texture;\n    batchableRenderGroup.bounds = renderGroup._textureBounds;\n    instructionSet.add(renderGroup);\n    this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n  }\n  _executeCacheAsTexture(renderGroup) {\n    if (renderGroup.textureNeedsUpdate) {\n      renderGroup.textureNeedsUpdate = false;\n      const worldTransformMatrix = tempMatrix.identity().translate(\n        -renderGroup._textureBounds.x,\n        -renderGroup._textureBounds.y\n      );\n      this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n      this._renderer.globalUniforms.push({\n        worldTransformMatrix,\n        worldColor: 4294967295\n      });\n      executeInstructions(renderGroup, this._renderer.renderPipes);\n      this._renderer.renderTarget.finishRenderPass();\n      this._renderer.renderTarget.pop();\n      this._renderer.globalUniforms.pop();\n    }\n    renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n    renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n  }\n  _executeDirect(renderGroup) {\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction clearList(list, index) {\n  index || (index = 0);\n  for (let j = index; j < list.length; j++) {\n    if (list[j]) {\n      list[j] = null;\n    } else {\n      break;\n    }\n  }\n}\n\nexport { clearList };\n//# sourceMappingURL=clearList.mjs.map\n","import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { clearList } from './clearList.mjs';\nimport { multiplyColors } from './multiplyColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = multiplyColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags |= container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    const renderable = container;\n    if (renderable.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(renderable);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = multiplyColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from './bounds/Bounds.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    this._updateCachedRenderGroups(container.renderGroup, null);\n    this._updateRenderGroups(container.renderGroup);\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCachedRenderGroups(renderGroup, closestCacheAsTexture) {\n    if (renderGroup.isCachedAsTexture) {\n      if (!renderGroup.updateCacheTexture)\n        return;\n      closestCacheAsTexture = renderGroup;\n    }\n    renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n    for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--) {\n      this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n    }\n    renderGroup.invalidateMatrices();\n    if (renderGroup.isCachedAsTexture) {\n      if (renderGroup.textureNeedsUpdate) {\n        const bounds = renderGroup.root.getLocalBounds();\n        bounds.ceil();\n        const lastTexture = renderGroup.texture;\n        if (renderGroup.texture) {\n          TexturePool.returnTexture(renderGroup.texture);\n        }\n        const renderer = this._renderer;\n        const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n        const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n        renderGroup.texture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          resolution,\n          antialias\n        );\n        renderGroup._textureBounds || (renderGroup._textureBounds = new Bounds());\n        renderGroup._textureBounds.copyFrom(bounds);\n        if (lastTexture !== renderGroup.texture) {\n          if (renderGroup.renderGroupParent) {\n            renderGroup.renderGroupParent.structureDidChange = true;\n          }\n        }\n      }\n    } else if (renderGroup.texture) {\n      TexturePool.returnTexture(renderGroup.texture);\n      renderGroup.texture = null;\n    }\n  }\n  _updateRenderGroups(renderGroup) {\n    const renderer = this._renderer;\n    const renderPipes = renderer.renderPipes;\n    renderGroup.runOnRender();\n    renderGroup.instructionSet.renderPipes = renderPipes;\n    if (!renderGroup.structureDidChange) {\n      validateRenderables(renderGroup, renderPipes);\n    } else {\n      clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n    }\n    updateRenderGroupTransforms(renderGroup);\n    if (renderGroup.structureDidChange) {\n      renderGroup.structureDidChange = false;\n      buildInstructions(renderGroup, renderer);\n    } else {\n      this._updateRenderables(renderGroup);\n    }\n    renderGroup.childrenRenderablesToUpdate.index = 0;\n    renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate)\n      return;\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n    }\n  }\n  _updateRenderables(renderGroup) {\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n    for (let i = 0; i < index; i++) {\n      const container = list[i];\n      if (container.didViewUpdate) {\n        renderGroup.updateRenderable(container);\n      }\n    }\n    clearList(list, index);\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.transform = sprite.groupTransform;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy(true);\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy(true);\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get globalUniformData() {\n    return this._currentGlobalUniformData;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    this._offset = 0;\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @param useOffset - this will spread out tasks so that they do not all run at the same time\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration, useOffset = true) {\n    const id = uid++;\n    let offset = 0;\n    if (useOffset) {\n      this._offset += 1e3;\n      offset = this._offset;\n    }\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      offset,\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.offset - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"scheduler\",\n  priority: 0\n};\n\nexport { SchedulerSystem };\n//# sourceMappingURL=SchedulerSystem.mjs.map\n","import { DOMAdapter } from '../environment/adapter.mjs';\nimport { VERSION } from './const.mjs';\n\n\"use strict\";\nlet saidHello = false;\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","\"use strict\";\nfunction cleanHash(hash) {\n  let clean = false;\n  for (const i in hash) {\n    if (hash[i] == void 0) {\n      clean = true;\n      break;\n    }\n  }\n  if (!clean)\n    return hash;\n  const cleanHash2 = /* @__PURE__ */ Object.create(null);\n  for (const i in hash) {\n    const value = hash[i];\n    if (value) {\n      cleanHash2[i] = value;\n    }\n  }\n  return cleanHash2;\n}\nfunction cleanArray(arr) {\n  let offset = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == void 0) {\n      offset++;\n    } else {\n      arr[i - offset] = arr[i];\n    }\n  }\n  arr.length -= offset;\n  return arr;\n}\n\nexport { cleanArray, cleanHash };\n//# sourceMappingURL=clean.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { cleanHash, cleanArray } from '../../../../utils/data/clean.mjs';\n\n\"use strict\";\nlet renderableGCTick = 0;\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /**\n   * Creates a new RenderableGCSystem instance.\n   * @param renderer - The renderer this garbage collection system works for\n   */\n  constructor(renderer) {\n    /** Array of renderables being tracked for garbage collection */\n    this._managedRenderables = [];\n    /** Array of hash objects being tracked for cleanup */\n    this._managedHashes = [];\n    /** Array of arrays being tracked for cleanup */\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  /**\n   * Initializes the garbage collection system with the provided options.\n   * @param options - Configuration options for the renderer\n   */\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  /**\n   * Gets whether the garbage collection system is currently enabled.\n   * @returns True if GC is enabled, false otherwise\n   */\n  get enabled() {\n    return !!this._handler;\n  }\n  /**\n   * Enables or disables the garbage collection system.\n   * When enabled, schedules periodic cleanup of resources.\n   * When disabled, cancels all scheduled cleanups.\n   */\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency,\n        false\n      );\n      this._hashHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const hash of this._managedHashes) {\n            hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n          }\n        },\n        this._frequency\n      );\n      this._arrayHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const array of this._managedArrays) {\n            cleanArray(array.context[array.hash]);\n          }\n        },\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  /**\n   * Adds a hash table to be managed by the garbage collector.\n   * @param context - The object containing the hash table\n   * @param hash - The property name of the hash table\n   */\n  addManagedHash(context, hash) {\n    this._managedHashes.push({ context, hash });\n  }\n  /**\n   * Adds an array to be managed by the garbage collector.\n   * @param context - The object containing the array\n   * @param hash - The property name of the array\n   */\n  addManagedArray(context, hash) {\n    this._managedArrays.push({ context, hash });\n  }\n  /**\n   * Updates the GC timestamp and tracking before rendering.\n   * @param options - The render options\n   * @param options.container - The container to render\n   */\n  prerender({\n    container\n  }) {\n    this._now = performance.now();\n    container.renderGroup.gcTick = renderableGCTick++;\n    this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n  }\n  /**\n   * Starts tracking a renderable for garbage collection.\n   * @param renderable - The renderable to track\n   */\n  addRenderable(renderable) {\n    if (!this.enabled)\n      return;\n    if (renderable._lastUsed === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastUsed = this._now;\n  }\n  /**\n   * Performs garbage collection by cleaning up unused renderables.\n   * Removes renderables that haven't been used for longer than maxUnusedTime.\n   */\n  run() {\n    const now = this._now;\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n      if ((renderGroup?.gcTick ?? 0) === currentTick) {\n        renderable._lastUsed = now;\n      }\n      if (now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          if (renderGroup)\n            renderGroup.structureDidChange = true;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastUsed = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length -= offset;\n  }\n  /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  /**\n   * Removes a renderable from being tracked when it's destroyed.\n   * @param renderable - The renderable to stop tracking\n   */\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n  /**\n   * Updates the GC tick counter for a render group and its children.\n   * @param renderGroup - The render group to update\n   * @param gcTick - The new tick value\n   */\n  _updateInstructionGCTick(renderGroup, gcTick) {\n    renderGroup.instructionSet.gcTick = gcTick;\n    for (const child of renderGroup.renderGroupChildren) {\n      this._updateInstructionGCTick(child, gcTick);\n    }\n  }\n};\n/**\n * Extension metadata for registering this system with the renderer.\n * @ignore\n */\n_RenderableGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\",\n  priority: 0\n};\n/**\n * Default configuration options for the garbage collection system.\n * These can be overridden when initializing the renderer.\n */\n_RenderableGCSystem.defaultOptions = {\n  /** Enable/disable the garbage collector */\n  renderableGCActive: true,\n  /** Time in ms before an unused resource is collected (default 1 minute) */\n  renderableGCMaxUnusedTime: 6e4,\n  /** How often to run garbage collection in ms (default 30 seconds) */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexport { RenderableGCSystem };\n//# sourceMappingURL=RenderableGCSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystem.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * @member {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { SchedulerSystem } from '../SchedulerSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook,\n  RenderableGCSystem,\n  SchedulerSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n"],"names":["fragment","vertex","source","MaskFilter","Filter","options","sprite","rest","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","Matrix","gpuProgram","GpuProgram","glProgram","GlProgram","value","filterManager","input","output","clearMode","_BatcherPipe","renderer","adaptor","State","name","instructionSet","batchers","DefaultBatcher","i","batchableObject","batch","batches","geometry","batcher","shader","ExtensionType","BatcherPipe","extensions","textureBit","textureBitGl","buildInstructions","renderGroup","rendererOrPipes","root","renderPipes","collectAllRenderablesAdvanced","collectAllRenderables","container","collectAllRenderablesSimple","renderable","renderableGC","children","length","isRoot","effect","renderPipeId","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","Sprite","Texture","AlphaMaskPipe","mask","maskedContainer","maskContainer","_maskedContainer","instruction","renderMask","filterEffect","BigPool","bounds","getGlobalBounds","colorTextureSource","filterTexture","TexturePool","maskData","RendererType","ColorMaskPipe","_container","colorStack","currentColor","_mask","StencilMaskPipe","_a","instructionsLength","renderTargetUid","maskStackIndex","STENCIL_MODES","CLEAR","ensureAttributes","extractedData","attribute","attributeData","warn","ensureStartAndStride","buffers","attributes","tempStride","tempStart","j","buffer","getAttributeInfoFromFormat","GpuStencilModesToPixi","UboSystem","unsafeEvalSupported","uniformGroup","uniformData","Buffer","BufferUsage","uniformGroupSignature","elements","layout","syncFunction","uboElements","data","offset","uniformGroupData","dataInt32","synced","uniformParsers","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","template","fragmentSrc","loopMatrix","col","row","uboSyncFunctionsSTD40","uboSyncFunctionsWGSL","calculateProjection","pm","x","y","width","height","flipY","sign","canvasCache","getCanvasTexture","canvas","texture","CanvasSource","onDestroy","isRenderingToScreen","renderTarget","resource","_RenderTarget","descriptor","uid","TextureSource","colorSource","_size","resolution","skipColorTexture","colorTexture","RenderTarget","RenderTargetSystem","Rectangle","SystemRunner","target","clear","clearColor","frame","renderSurface","didChange","gpuRenderTarget","viewport","pixelWidth","pixelHeight","currentRenderTargetData","sourceRenderSurfaceTexture","destinationTexture","originSrc","size","originDest","key","BufferResource","EventEmitter","destroyBuffer","CustomRenderPipe","executeInstructions","instructions","tempMatrix","RenderGroupPipe","batchableRenderGroup","BatchableSprite","worldTransformMatrix","clearList","list","index","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","updateRenderGroupTransforms","updateChildRenderGroups","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","childrenAtDepth","child","updateTransformAndChildren","worldAlpha","renderGroupParent","multiplyColors","updateFlags","localTransform","parent","updateColorBlendVisibility","groupAlpha","validateRenderables","rebuildRequired","RenderGroupSystem","transform","originalLocalTransform","closestCacheAsTexture","lastTexture","antialias","SpritePipe","gpuSprite","batchableSprite","_BackgroundSystem","Color","BackgroundSystem","BLEND_MODE_FILTERS","BlendModePipe","blendMode","imageTypes","_ExtractSystem","defaults","image","format","quality","resolve","reject","blob","reader","pixelInfo","link","base64","style","ExtractSystem","tempRect","noColor","GenerateTextureSystem","region","getLocalBounds","RenderTexture","GlobalUniformSystem","projectionMatrix","worldColor","currentGlobalUniformData","Point","globalUniformData","uniforms","color32BitToUniform","bindGroup","BindGroup","SchedulerSystem","Ticker","func","duration","useOffset","id","now","task","elapsed","saidHello","sayHello","type","DOMAdapter","args","VERSION","HelloSystem","cleanHash","hash","clean","cleanHash2","cleanArray","arr","renderableGCTick","_RenderableGCSystem","array","context","managedRenderables","currentTick","rp","gcTick","RenderableGCSystem","_TextureGCSystem","managedTextures","TextureGCSystem","_ViewSystem","deprecation","v8_0_0","desiredScreenWidth","desiredScreenHeight","ViewSystem","SharedSystems","RendererInitHook","SharedRenderPipes"],"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]}